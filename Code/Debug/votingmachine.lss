
votingmachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00002a30  00002ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800086  00800086  00002aea  2**0
                  ALLOC
  3 .stab         00001e18  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8d  00000000  00000000  00004904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005691  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000057d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000758a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008475  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009224  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009611  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <main>
      8a:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e7       	ldi	r26, 0x7D	; 125
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 14 	jmp	0x29be	; 0x29be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e7       	ldi	r24, 0x7D	; 125
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_DIRECTION>:
#include "LCD.h"
#define  F_CPU 8000000UL
#include <util/delay.h>

void LCD_DIRECTION(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 54       	subi	r28, 0x46	; 70
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 5b       	subi	r30, 0xBD	; 189
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a8 ec       	ldi	r26, 0xC8	; 200
     b6c:	b2 e4       	ldi	r27, 0x42	; 66
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	8e 01       	movw	r16, r28
     b78:	01 5c       	subi	r16, 0xC1	; 193
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	ed 5b       	subi	r30, 0xBD	; 189
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba4:	fe 01       	movw	r30, r28
     ba6:	ff 96       	adiw	r30, 0x3f	; 63
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <LCD_DIRECTION+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e af       	std	Y+62, r25	; 0x3e
     bc6:	8d af       	std	Y+61, r24	; 0x3d
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <LCD_DIRECTION+0x110>
	else if (__tmp > 65535)
     bca:	fe 01       	movw	r30, r28
     bcc:	ff 96       	adiw	r30, 0x3f	; 63
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	64 f5       	brge	.+88     	; 0xc3e <LCD_DIRECTION+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	fe 01       	movw	r30, r28
     be8:	ed 5b       	subi	r30, 0xBD	; 189
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <LCD_DIRECTION+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c af       	std	Y+60, r25	; 0x3c
     c1c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c20:	9c ad       	ldd	r25, Y+60	; 0x3c
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <LCD_DIRECTION+0xdc>
     c26:	9c af       	std	Y+60, r25	; 0x3c
     c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e af       	std	Y+62, r25	; 0x3e
     c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d ad       	ldd	r24, Y+61	; 0x3d
     c36:	9e ad       	ldd	r25, Y+62	; 0x3e
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <LCD_DIRECTION+0xd0>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <LCD_DIRECTION+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	fe 01       	movw	r30, r28
     c40:	ff 96       	adiw	r30, 0x3f	; 63
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e af       	std	Y+62, r25	; 0x3e
     c54:	8d af       	std	Y+61, r24	; 0x3d
     c56:	8d ad       	ldd	r24, Y+61	; 0x3d
     c58:	9e ad       	ldd	r25, Y+62	; 0x3e
     c5a:	9a af       	std	Y+58, r25	; 0x3a
     c5c:	89 af       	std	Y+57, r24	; 0x39
     c5e:	89 ad       	ldd	r24, Y+57	; 0x39
     c60:	9a ad       	ldd	r25, Y+58	; 0x3a
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <LCD_DIRECTION+0x11c>
     c66:	9a af       	std	Y+58, r25	; 0x3a
     c68:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	#if defined eight_bits_mode
	DIO_direction_port('A',0XFF);
     c6a:	81 e4       	ldi	r24, 0x41	; 65
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <DIO_direction_port>
	DIO_set_direction_pin('B',EN,1);
     c72:	82 e4       	ldi	r24, 0x42	; 66
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_set_direction_pin>
	DIO_set_direction_pin('B',RW,1);
     c7c:	82 e4       	ldi	r24, 0x42	; 66
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_set_direction_pin>
	DIO_set_direction_pin('B',RS,1);
     c86:	82 e4       	ldi	r24, 0x42	; 66
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_set_direction_pin>
	LCD_Send_cmd(EIGHT_BITS); //8 bit mode
     c90:	88 e3       	ldi	r24, 0x38	; 56
     c92:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a0 e8       	ldi	r26, 0x80	; 128
     c9c:	bf e3       	ldi	r27, 0x3F	; 63
     c9e:	8d ab       	std	Y+53, r24	; 0x35
     ca0:	9e ab       	std	Y+54, r25	; 0x36
     ca2:	af ab       	std	Y+55, r26	; 0x37
     ca4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca6:	6d a9       	ldd	r22, Y+53	; 0x35
     ca8:	7e a9       	ldd	r23, Y+54	; 0x36
     caa:	8f a9       	ldd	r24, Y+55	; 0x37
     cac:	98 ad       	ldd	r25, Y+56	; 0x38
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	4a ef       	ldi	r20, 0xFA	; 250
     cb4:	54 e4       	ldi	r21, 0x44	; 68
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	89 ab       	std	Y+49, r24	; 0x31
     cc0:	9a ab       	std	Y+50, r25	; 0x32
     cc2:	ab ab       	std	Y+51, r26	; 0x33
     cc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cc6:	69 a9       	ldd	r22, Y+49	; 0x31
     cc8:	7a a9       	ldd	r23, Y+50	; 0x32
     cca:	8b a9       	ldd	r24, Y+51	; 0x33
     ccc:	9c a9       	ldd	r25, Y+52	; 0x34
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e8       	ldi	r20, 0x80	; 128
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cda:	88 23       	and	r24, r24
     cdc:	2c f4       	brge	.+10     	; 0xce8 <LCD_DIRECTION+0x1a2>
		__ticks = 1;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	98 ab       	std	Y+48, r25	; 0x30
     ce4:	8f a7       	std	Y+47, r24	; 0x2f
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <LCD_DIRECTION+0x220>
	else if (__tmp > 65535)
     ce8:	69 a9       	ldd	r22, Y+49	; 0x31
     cea:	7a a9       	ldd	r23, Y+50	; 0x32
     cec:	8b a9       	ldd	r24, Y+51	; 0x33
     cee:	9c a9       	ldd	r25, Y+52	; 0x34
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	4f e7       	ldi	r20, 0x7F	; 127
     cf6:	57 e4       	ldi	r21, 0x47	; 71
     cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfc:	18 16       	cp	r1, r24
     cfe:	4c f5       	brge	.+82     	; 0xd52 <LCD_DIRECTION+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d00:	6d a9       	ldd	r22, Y+53	; 0x35
     d02:	7e a9       	ldd	r23, Y+54	; 0x36
     d04:	8f a9       	ldd	r24, Y+55	; 0x37
     d06:	98 ad       	ldd	r25, Y+56	; 0x38
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	98 ab       	std	Y+48, r25	; 0x30
     d26:	8f a7       	std	Y+47, r24	; 0x2f
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <LCD_DIRECTION+0x202>
     d2a:	88 ec       	ldi	r24, 0xC8	; 200
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9e a7       	std	Y+46, r25	; 0x2e
     d30:	8d a7       	std	Y+45, r24	; 0x2d
     d32:	8d a5       	ldd	r24, Y+45	; 0x2d
     d34:	9e a5       	ldd	r25, Y+46	; 0x2e
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCD_DIRECTION+0x1f0>
     d3a:	9e a7       	std	Y+46, r25	; 0x2e
     d3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d40:	98 a9       	ldd	r25, Y+48	; 0x30
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	98 ab       	std	Y+48, r25	; 0x30
     d46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4a:	98 a9       	ldd	r25, Y+48	; 0x30
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	69 f7       	brne	.-38     	; 0xd2a <LCD_DIRECTION+0x1e4>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <LCD_DIRECTION+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	69 a9       	ldd	r22, Y+49	; 0x31
     d54:	7a a9       	ldd	r23, Y+50	; 0x32
     d56:	8b a9       	ldd	r24, Y+51	; 0x33
     d58:	9c a9       	ldd	r25, Y+52	; 0x34
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	98 ab       	std	Y+48, r25	; 0x30
     d64:	8f a7       	std	Y+47, r24	; 0x2f
     d66:	8f a5       	ldd	r24, Y+47	; 0x2f
     d68:	98 a9       	ldd	r25, Y+48	; 0x30
     d6a:	9c a7       	std	Y+44, r25	; 0x2c
     d6c:	8b a7       	std	Y+43, r24	; 0x2b
     d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d70:	9c a5       	ldd	r25, Y+44	; 0x2c
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <LCD_DIRECTION+0x22c>
     d76:	9c a7       	std	Y+44, r25	; 0x2c
     d78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_Send_cmd(DISPLAY_ON_CURSOR_ON);//display on cursor on
     d7a:	8e e0       	ldi	r24, 0x0E	; 14
     d7c:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a0 e8       	ldi	r26, 0x80	; 128
     d86:	bf e3       	ldi	r27, 0x3F	; 63
     d88:	8f a3       	std	Y+39, r24	; 0x27
     d8a:	98 a7       	std	Y+40, r25	; 0x28
     d8c:	a9 a7       	std	Y+41, r26	; 0x29
     d8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d90:	6f a1       	ldd	r22, Y+39	; 0x27
     d92:	78 a5       	ldd	r23, Y+40	; 0x28
     d94:	89 a5       	ldd	r24, Y+41	; 0x29
     d96:	9a a5       	ldd	r25, Y+42	; 0x2a
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	4a ef       	ldi	r20, 0xFA	; 250
     d9e:	54 e4       	ldi	r21, 0x44	; 68
     da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	8b a3       	std	Y+35, r24	; 0x23
     daa:	9c a3       	std	Y+36, r25	; 0x24
     dac:	ad a3       	std	Y+37, r26	; 0x25
     dae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     db0:	6b a1       	ldd	r22, Y+35	; 0x23
     db2:	7c a1       	ldd	r23, Y+36	; 0x24
     db4:	8d a1       	ldd	r24, Y+37	; 0x25
     db6:	9e a1       	ldd	r25, Y+38	; 0x26
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <LCD_DIRECTION+0x28c>
		__ticks = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9a a3       	std	Y+34, r25	; 0x22
     dce:	89 a3       	std	Y+33, r24	; 0x21
     dd0:	3f c0       	rjmp	.+126    	; 0xe50 <LCD_DIRECTION+0x30a>
	else if (__tmp > 65535)
     dd2:	6b a1       	ldd	r22, Y+35	; 0x23
     dd4:	7c a1       	ldd	r23, Y+36	; 0x24
     dd6:	8d a1       	ldd	r24, Y+37	; 0x25
     dd8:	9e a1       	ldd	r25, Y+38	; 0x26
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	3f ef       	ldi	r19, 0xFF	; 255
     dde:	4f e7       	ldi	r20, 0x7F	; 127
     de0:	57 e4       	ldi	r21, 0x47	; 71
     de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de6:	18 16       	cp	r1, r24
     de8:	4c f5       	brge	.+82     	; 0xe3c <LCD_DIRECTION+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dea:	6f a1       	ldd	r22, Y+39	; 0x27
     dec:	78 a5       	ldd	r23, Y+40	; 0x28
     dee:	89 a5       	ldd	r24, Y+41	; 0x29
     df0:	9a a5       	ldd	r25, Y+42	; 0x2a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e2       	ldi	r20, 0x20	; 32
     df8:	51 e4       	ldi	r21, 0x41	; 65
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9a a3       	std	Y+34, r25	; 0x22
     e10:	89 a3       	std	Y+33, r24	; 0x21
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <LCD_DIRECTION+0x2ec>
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 a3       	std	Y+32, r25	; 0x20
     e1a:	8f 8f       	std	Y+31, r24	; 0x1f
     e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e1e:	98 a1       	ldd	r25, Y+32	; 0x20
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <LCD_DIRECTION+0x2da>
     e24:	98 a3       	std	Y+32, r25	; 0x20
     e26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e28:	89 a1       	ldd	r24, Y+33	; 0x21
     e2a:	9a a1       	ldd	r25, Y+34	; 0x22
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	9a a3       	std	Y+34, r25	; 0x22
     e30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	89 a1       	ldd	r24, Y+33	; 0x21
     e34:	9a a1       	ldd	r25, Y+34	; 0x22
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	69 f7       	brne	.-38     	; 0xe14 <LCD_DIRECTION+0x2ce>
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <LCD_DIRECTION+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3c:	6b a1       	ldd	r22, Y+35	; 0x23
     e3e:	7c a1       	ldd	r23, Y+36	; 0x24
     e40:	8d a1       	ldd	r24, Y+37	; 0x25
     e42:	9e a1       	ldd	r25, Y+38	; 0x26
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9a a3       	std	Y+34, r25	; 0x22
     e4e:	89 a3       	std	Y+33, r24	; 0x21
     e50:	89 a1       	ldd	r24, Y+33	; 0x21
     e52:	9a a1       	ldd	r25, Y+34	; 0x22
     e54:	9e 8f       	std	Y+30, r25	; 0x1e
     e56:	8d 8f       	std	Y+29, r24	; 0x1d
     e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <LCD_DIRECTION+0x316>
     e60:	9e 8f       	std	Y+30, r25	; 0x1e
     e62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Send_cmd(CLR_SCREEN);//clear the screen
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e2       	ldi	r26, 0x20	; 32
     e70:	b1 e4       	ldi	r27, 0x41	; 65
     e72:	89 8f       	std	Y+25, r24	; 0x19
     e74:	9a 8f       	std	Y+26, r25	; 0x1a
     e76:	ab 8f       	std	Y+27, r26	; 0x1b
     e78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	69 8d       	ldd	r22, Y+25	; 0x19
     e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8d 8b       	std	Y+21, r24	; 0x15
     e94:	9e 8b       	std	Y+22, r25	; 0x16
     e96:	af 8b       	std	Y+23, r26	; 0x17
     e98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e9a:	6d 89       	ldd	r22, Y+21	; 0x15
     e9c:	7e 89       	ldd	r23, Y+22	; 0x16
     e9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ea0:	98 8d       	ldd	r25, Y+24	; 0x18
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <LCD_DIRECTION+0x376>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 8b       	std	Y+20, r25	; 0x14
     eb8:	8b 8b       	std	Y+19, r24	; 0x13
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <LCD_DIRECTION+0x3f4>
	else if (__tmp > 65535)
     ebc:	6d 89       	ldd	r22, Y+21	; 0x15
     ebe:	7e 89       	ldd	r23, Y+22	; 0x16
     ec0:	8f 89       	ldd	r24, Y+23	; 0x17
     ec2:	98 8d       	ldd	r25, Y+24	; 0x18
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <LCD_DIRECTION+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	69 8d       	ldd	r22, Y+25	; 0x19
     ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9c 8b       	std	Y+20, r25	; 0x14
     efa:	8b 8b       	std	Y+19, r24	; 0x13
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <LCD_DIRECTION+0x3d6>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9a 8b       	std	Y+18, r25	; 0x12
     f04:	89 8b       	std	Y+17, r24	; 0x11
     f06:	89 89       	ldd	r24, Y+17	; 0x11
     f08:	9a 89       	ldd	r25, Y+18	; 0x12
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <LCD_DIRECTION+0x3c4>
     f0e:	9a 8b       	std	Y+18, r25	; 0x12
     f10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9c 8b       	std	Y+20, r25	; 0x14
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8b 89       	ldd	r24, Y+19	; 0x13
     f1e:	9c 89       	ldd	r25, Y+20	; 0x14
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <LCD_DIRECTION+0x3b8>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <LCD_DIRECTION+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6d 89       	ldd	r22, Y+21	; 0x15
     f28:	7e 89       	ldd	r23, Y+22	; 0x16
     f2a:	8f 89       	ldd	r24, Y+23	; 0x17
     f2c:	98 8d       	ldd	r25, Y+24	; 0x18
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9c 8b       	std	Y+20, r25	; 0x14
     f38:	8b 8b       	std	Y+19, r24	; 0x13
     f3a:	8b 89       	ldd	r24, Y+19	; 0x13
     f3c:	9c 89       	ldd	r25, Y+20	; 0x14
     f3e:	98 8b       	std	Y+16, r25	; 0x10
     f40:	8f 87       	std	Y+15, r24	; 0x0f
     f42:	8f 85       	ldd	r24, Y+15	; 0x0f
     f44:	98 89       	ldd	r25, Y+16	; 0x10
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCD_DIRECTION+0x400>
     f4a:	98 8b       	std	Y+16, r25	; 0x10
     f4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_Send_cmd(ENTRY_MODE); //entry mode
     f4e:	86 e0       	ldi	r24, 0x06	; 6
     f50:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e8       	ldi	r26, 0x80	; 128
     f5a:	bf e3       	ldi	r27, 0x3F	; 63
     f5c:	8b 87       	std	Y+11, r24	; 0x0b
     f5e:	9c 87       	std	Y+12, r25	; 0x0c
     f60:	ad 87       	std	Y+13, r26	; 0x0d
     f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f64:	6b 85       	ldd	r22, Y+11	; 0x0b
     f66:	7c 85       	ldd	r23, Y+12	; 0x0c
     f68:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	4a ef       	ldi	r20, 0xFA	; 250
     f72:	54 e4       	ldi	r21, 0x44	; 68
     f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	8f 83       	std	Y+7, r24	; 0x07
     f7e:	98 87       	std	Y+8, r25	; 0x08
     f80:	a9 87       	std	Y+9, r26	; 0x09
     f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f84:	6f 81       	ldd	r22, Y+7	; 0x07
     f86:	78 85       	ldd	r23, Y+8	; 0x08
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <LCD_DIRECTION+0x460>
		__ticks = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
     fa4:	3f c0       	rjmp	.+126    	; 0x1024 <LCD_DIRECTION+0x4de>
	else if (__tmp > 65535)
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	57 e4       	ldi	r21, 0x47	; 71
     fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	4c f5       	brge	.+82     	; 0x1010 <LCD_DIRECTION+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <LCD_DIRECTION+0x4c0>
     fe8:	88 ec       	ldi	r24, 0xC8	; 200
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <LCD_DIRECTION+0x4ae>
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f7       	brne	.-38     	; 0xfe8 <LCD_DIRECTION+0x4a2>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <LCD_DIRECTION+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	6f 81       	ldd	r22, Y+7	; 0x07
    1012:	78 85       	ldd	r23, Y+8	; 0x08
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	9a 85       	ldd	r25, Y+10	; 0x0a
    1018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <LCD_DIRECTION+0x4ea>
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	LCD_Send_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_Send_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
    1038:	ca 5b       	subi	r28, 0xBA	; 186
    103a:	df 4f       	sbci	r29, 0xFF	; 255
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <ENABLE>:


static void ENABLE(void)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	6c 97       	sbiw	r28, 0x1c	; 28
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
	DIO_WRITE_PIN('B',EN,1);
    1064:	82 e4       	ldi	r24, 0x42	; 66
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	b0 e4       	ldi	r27, 0x40	; 64
    1076:	89 8f       	std	Y+25, r24	; 0x19
    1078:	9a 8f       	std	Y+26, r25	; 0x1a
    107a:	ab 8f       	std	Y+27, r26	; 0x1b
    107c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107e:	69 8d       	ldd	r22, Y+25	; 0x19
    1080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4a ef       	ldi	r20, 0xFA	; 250
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8d 8b       	std	Y+21, r24	; 0x15
    1098:	9e 8b       	std	Y+22, r25	; 0x16
    109a:	af 8b       	std	Y+23, r26	; 0x17
    109c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109e:	6d 89       	ldd	r22, Y+21	; 0x15
    10a0:	7e 89       	ldd	r23, Y+22	; 0x16
    10a2:	8f 89       	ldd	r24, Y+23	; 0x17
    10a4:	98 8d       	ldd	r25, Y+24	; 0x18
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <ENABLE+0x70>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	3f c0       	rjmp	.+126    	; 0x113e <ENABLE+0xee>
	else if (__tmp > 65535)
    10c0:	6d 89       	ldd	r22, Y+21	; 0x15
    10c2:	7e 89       	ldd	r23, Y+22	; 0x16
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	57 e4       	ldi	r21, 0x47	; 71
    10d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <ENABLE+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	69 8d       	ldd	r22, Y+25	; 0x19
    10da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <ENABLE+0xd0>
    1102:	88 ec       	ldi	r24, 0xC8	; 200
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9a 8b       	std	Y+18, r25	; 0x12
    1108:	89 8b       	std	Y+17, r24	; 0x11
    110a:	89 89       	ldd	r24, Y+17	; 0x11
    110c:	9a 89       	ldd	r25, Y+18	; 0x12
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <ENABLE+0xbe>
    1112:	9a 8b       	std	Y+18, r25	; 0x12
    1114:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	8b 89       	ldd	r24, Y+19	; 0x13
    1118:	9c 89       	ldd	r25, Y+20	; 0x14
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9c 8b       	std	Y+20, r25	; 0x14
    111e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	8b 89       	ldd	r24, Y+19	; 0x13
    1122:	9c 89       	ldd	r25, Y+20	; 0x14
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	69 f7       	brne	.-38     	; 0x1102 <ENABLE+0xb2>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <ENABLE+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	6d 89       	ldd	r22, Y+21	; 0x15
    112c:	7e 89       	ldd	r23, Y+22	; 0x16
    112e:	8f 89       	ldd	r24, Y+23	; 0x17
    1130:	98 8d       	ldd	r25, Y+24	; 0x18
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9c 8b       	std	Y+20, r25	; 0x14
    113c:	8b 8b       	std	Y+19, r24	; 0x13
    113e:	8b 89       	ldd	r24, Y+19	; 0x13
    1140:	9c 89       	ldd	r25, Y+20	; 0x14
    1142:	98 8b       	std	Y+16, r25	; 0x10
    1144:	8f 87       	std	Y+15, r24	; 0x0f
    1146:	8f 85       	ldd	r24, Y+15	; 0x0f
    1148:	98 89       	ldd	r25, Y+16	; 0x10
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <ENABLE+0xfa>
    114e:	98 8b       	std	Y+16, r25	; 0x10
    1150:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_WRITE_PIN('B',EN,0);
    1152:	82 e4       	ldi	r24, 0x42	; 66
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 e0       	ldi	r26, 0x00	; 0
    1162:	b0 e4       	ldi	r27, 0x40	; 64
    1164:	8b 87       	std	Y+11, r24	; 0x0b
    1166:	9c 87       	std	Y+12, r25	; 0x0c
    1168:	ad 87       	std	Y+13, r26	; 0x0d
    116a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116c:	6b 85       	ldd	r22, Y+11	; 0x0b
    116e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1170:	8d 85       	ldd	r24, Y+13	; 0x0d
    1172:	9e 85       	ldd	r25, Y+14	; 0x0e
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4a ef       	ldi	r20, 0xFA	; 250
    117a:	54 e4       	ldi	r21, 0x44	; 68
    117c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8f 83       	std	Y+7, r24	; 0x07
    1186:	98 87       	std	Y+8, r25	; 0x08
    1188:	a9 87       	std	Y+9, r26	; 0x09
    118a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    118c:	6f 81       	ldd	r22, Y+7	; 0x07
    118e:	78 85       	ldd	r23, Y+8	; 0x08
    1190:	89 85       	ldd	r24, Y+9	; 0x09
    1192:	9a 85       	ldd	r25, Y+10	; 0x0a
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	2c f4       	brge	.+10     	; 0x11ae <ENABLE+0x15e>
		__ticks = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	3f c0       	rjmp	.+126    	; 0x122c <ENABLE+0x1dc>
	else if (__tmp > 65535)
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	3f ef       	ldi	r19, 0xFF	; 255
    11ba:	4f e7       	ldi	r20, 0x7F	; 127
    11bc:	57 e4       	ldi	r21, 0x47	; 71
    11be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c2:	18 16       	cp	r1, r24
    11c4:	4c f5       	brge	.+82     	; 0x1218 <ENABLE+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    11cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e2       	ldi	r20, 0x20	; 32
    11d4:	51 e4       	ldi	r21, 0x41	; 65
    11d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <ENABLE+0x1be>
    11f0:	88 ec       	ldi	r24, 0xC8	; 200
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 83       	std	Y+4, r25	; 0x04
    11f6:	8b 83       	std	Y+3, r24	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <ENABLE+0x1ac>
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	69 f7       	brne	.-38     	; 0x11f0 <ENABLE+0x1a0>
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <ENABLE+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <ENABLE+0x1e8>
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1240:	6c 96       	adiw	r28, 0x1c	; 28
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <LCD_Send_cmd>:
void LCD_Send_cmd(char cmd)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2f 97       	sbiw	r28, 0x0f	; 15
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
    1268:	81 e4       	ldi	r24, 0x41	; 65
    126a:	6f 85       	ldd	r22, Y+15	; 0x0f
    126c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_write_port>
	DIO_WRITE_PIN('B',RS,0);
    1270:	82 e4       	ldi	r24, 0x42	; 66
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
	ENABLE();
    127a:	0e 94 28 08 	call	0x1050	; 0x1050 <ENABLE>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a0 e8       	ldi	r26, 0x80	; 128
    1284:	bf e3       	ldi	r27, 0x3F	; 63
    1286:	8b 87       	std	Y+11, r24	; 0x0b
    1288:	9c 87       	std	Y+12, r25	; 0x0c
    128a:	ad 87       	std	Y+13, r26	; 0x0d
    128c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 85       	ldd	r24, Y+13	; 0x0d
    1294:	9e 85       	ldd	r25, Y+14	; 0x0e
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8f 83       	std	Y+7, r24	; 0x07
    12a8:	98 87       	std	Y+8, r25	; 0x08
    12aa:	a9 87       	std	Y+9, r26	; 0x09
    12ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <LCD_Send_cmd+0x7e>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <LCD_Send_cmd+0xfc>
	else if (__tmp > 65535)
    12d0:	6f 81       	ldd	r22, Y+7	; 0x07
    12d2:	78 85       	ldd	r23, Y+8	; 0x08
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	4c f5       	brge	.+82     	; 0x133a <LCD_Send_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9e 83       	std	Y+6, r25	; 0x06
    130e:	8d 83       	std	Y+5, r24	; 0x05
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <LCD_Send_cmd+0xde>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <LCD_Send_cmd+0xcc>
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f7       	brne	.-38     	; 0x1312 <LCD_Send_cmd+0xc0>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <LCD_Send_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9e 83       	std	Y+6, r25	; 0x06
    134c:	8d 83       	std	Y+5, r24	; 0x05
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <LCD_Send_cmd+0x108>
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
	write_hight_nibble('A',cmd);
	DIO_WRITE_PIN('B',RS,0);
	ENABLE();
	#endif
	_delay_ms(1);
}
    1362:	2f 96       	adiw	r28, 0x0f	; 15
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <LCD_Send_char>:

void LCD_Send_char(char data)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	2f 97       	sbiw	r28, 0x0f	; 15
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',data);
    138a:	81 e4       	ldi	r24, 0x41	; 65
    138c:	6f 85       	ldd	r22, Y+15	; 0x0f
    138e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <DIO_write_port>
	DIO_WRITE_PIN('B',RS,1);
    1392:	82 e4       	ldi	r24, 0x42	; 66
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    ENABLE();
    139c:	0e 94 28 08 	call	0x1050	; 0x1050 <ENABLE>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e8       	ldi	r26, 0x80	; 128
    13a6:	bf e3       	ldi	r27, 0x3F	; 63
    13a8:	8b 87       	std	Y+11, r24	; 0x0b
    13aa:	9c 87       	std	Y+12, r25	; 0x0c
    13ac:	ad 87       	std	Y+13, r26	; 0x0d
    13ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8f 83       	std	Y+7, r24	; 0x07
    13ca:	98 87       	std	Y+8, r25	; 0x08
    13cc:	a9 87       	std	Y+9, r26	; 0x09
    13ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <LCD_Send_char+0x7e>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <LCD_Send_char+0xfc>
	else if (__tmp > 65535)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <LCD_Send_char+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	6b 85       	ldd	r22, Y+11	; 0x0b
    140c:	7c 85       	ldd	r23, Y+12	; 0x0c
    140e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1410:	9e 85       	ldd	r25, Y+14	; 0x0e
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <LCD_Send_char+0xde>
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	8b 83       	std	Y+3, r24	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_Send_char+0xcc>
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <LCD_Send_char+0xc0>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <LCD_Send_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6f 81       	ldd	r22, Y+7	; 0x07
    145e:	78 85       	ldd	r23, Y+8	; 0x08
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_Send_char+0x108>
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	write_hight_nibble('A',data);
	DIO_WRITE_PIN('B',RS,1);
	ENABLE();
	#endif
	_delay_ms(1);
}
    1484:	2f 96       	adiw	r28, 0x0f	; 15
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <LCD_Send_string>:


void LCD_Send_string(char *data)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <LCD_Send_string+0x6>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	0a c0       	rjmp	.+20     	; 0x14ba <LCD_Send_string+0x24>
	while((*data)!='\0')
	{
		LCD_Send_char(*data);
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	80 81       	ld	r24, Z
    14ac:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
		data++;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_Send_string(char *data)
{
	while((*data)!='\0')
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	80 81       	ld	r24, Z
    14c0:	88 23       	and	r24, r24
    14c2:	89 f7       	brne	.-30     	; 0x14a6 <LCD_Send_string+0x10>
	{
		LCD_Send_char(*data);
		data++;
	}
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_clearscreen>:
void LCD_clearscreen()
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	2e 97       	sbiw	r28, 0x0e	; 14
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_cmd(CLR_SCREEN);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e2       	ldi	r26, 0x20	; 32
    14ee:	b1 e4       	ldi	r27, 0x41	; 65
    14f0:	8b 87       	std	Y+11, r24	; 0x0b
    14f2:	9c 87       	std	Y+12, r25	; 0x0c
    14f4:	ad 87       	std	Y+13, r26	; 0x0d
    14f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	4a ef       	ldi	r20, 0xFA	; 250
    1506:	54 e4       	ldi	r21, 0x44	; 68
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	a9 87       	std	Y+9, r26	; 0x09
    1516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152c:	88 23       	and	r24, r24
    152e:	2c f4       	brge	.+10     	; 0x153a <LCD_clearscreen+0x6c>
		__ticks = 1;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154e:	18 16       	cp	r1, r24
    1550:	4c f5       	brge	.+82     	; 0x15a4 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1552:	6b 85       	ldd	r22, Y+11	; 0x0b
    1554:	7c 85       	ldd	r23, Y+12	; 0x0c
    1556:	8d 85       	ldd	r24, Y+13	; 0x0d
    1558:	9e 85       	ldd	r25, Y+14	; 0x0e
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e2       	ldi	r20, 0x20	; 32
    1560:	51 e4       	ldi	r21, 0x41	; 65
    1562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	0f c0       	rjmp	.+30     	; 0x159a <LCD_clearscreen+0xcc>
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCD_clearscreen+0xba>
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	69 f7       	brne	.-38     	; 0x157c <LCD_clearscreen+0xae>
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <LCD_clearscreen+0xf6>
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    15cc:	2e 96       	adiw	r28, 0x0e	; 14
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	61 97       	sbiw	r28, 0x11	; 17
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	88 8b       	std	Y+16, r24	; 0x10
    15f4:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    15f6:	88 89       	ldd	r24, Y+16	; 0x10
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	48 f4       	brcc	.+18     	; 0x160e <LCD_movecursor+0x30>
    15fc:	88 89       	ldd	r24, Y+16	; 0x10
    15fe:	88 23       	and	r24, r24
    1600:	31 f0       	breq	.+12     	; 0x160e <LCD_movecursor+0x30>
    1602:	89 89       	ldd	r24, Y+17	; 0x11
    1604:	81 31       	cpi	r24, 0x11	; 17
    1606:	18 f4       	brcc	.+6      	; 0x160e <LCD_movecursor+0x30>
    1608:	89 89       	ldd	r24, Y+17	; 0x11
    160a:	88 23       	and	r24, r24
    160c:	19 f4       	brne	.+6      	; 0x1614 <LCD_movecursor+0x36>
	{
		data=0x80;
    160e:	80 e8       	ldi	r24, 0x80	; 128
    1610:	8f 87       	std	Y+15, r24	; 0x0f
    1612:	0d c0       	rjmp	.+26     	; 0x162e <LCD_movecursor+0x50>
	}
	else if(row==1)
    1614:	88 89       	ldd	r24, Y+16	; 0x10
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	21 f4       	brne	.+8      	; 0x1622 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    161a:	89 89       	ldd	r24, Y+17	; 0x11
    161c:	81 58       	subi	r24, 0x81	; 129
    161e:	8f 87       	std	Y+15, r24	; 0x0f
    1620:	06 c0       	rjmp	.+12     	; 0x162e <LCD_movecursor+0x50>
	}
	else if (row==2)
    1622:	88 89       	ldd	r24, Y+16	; 0x10
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	19 f4       	brne	.+6      	; 0x162e <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    1628:	89 89       	ldd	r24, Y+17	; 0x11
    162a:	81 54       	subi	r24, 0x41	; 65
    162c:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_Send_cmd(data);
    162e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1630:	0e 94 29 09 	call	0x1252	; 0x1252 <LCD_Send_cmd>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a0 e8       	ldi	r26, 0x80	; 128
    163a:	bf e3       	ldi	r27, 0x3F	; 63
    163c:	8b 87       	std	Y+11, r24	; 0x0b
    163e:	9c 87       	std	Y+12, r25	; 0x0c
    1640:	ad 87       	std	Y+13, r26	; 0x0d
    1642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1644:	6b 85       	ldd	r22, Y+11	; 0x0b
    1646:	7c 85       	ldd	r23, Y+12	; 0x0c
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a ef       	ldi	r20, 0xFA	; 250
    1652:	54 e4       	ldi	r21, 0x44	; 68
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	8f 83       	std	Y+7, r24	; 0x07
    165e:	98 87       	std	Y+8, r25	; 0x08
    1660:	a9 87       	std	Y+9, r26	; 0x09
    1662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	5f e3       	ldi	r21, 0x3F	; 63
    1674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1678:	88 23       	and	r24, r24
    167a:	2c f4       	brge	.+10     	; 0x1686 <LCD_movecursor+0xa8>
		__ticks = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	3f c0       	rjmp	.+126    	; 0x1704 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	4f e7       	ldi	r20, 0x7F	; 127
    1694:	57 e4       	ldi	r21, 0x47	; 71
    1696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169a:	18 16       	cp	r1, r24
    169c:	4c f5       	brge	.+82     	; 0x16f0 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <LCD_movecursor+0x108>
    16c8:	88 ec       	ldi	r24, 0xC8	; 200
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_movecursor+0xf6>
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <LCD_movecursor+0xea>
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <LCD_movecursor+0x132>
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1718:	61 96       	adiw	r28, 0x11	; 17
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <BUTTON_direction>:
#include <stdlib.h>

#include "dio.h"

void BUTTON_direction(char portname,char pinnumber)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <BUTTON_direction+0x6>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	6a 83       	std	Y+2, r22	; 0x02

  DIO_set_direction_pin(portname,pinnumber,0);
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	6a 81       	ldd	r22, Y+2	; 0x02
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DIO_set_direction_pin>

}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <BUTTON_reed>:
char BUTTON_reed(char portname,char pinnumber)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <BUTTON_reed+0x6>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	8a 83       	std	Y+2, r24	; 0x02
    175a:	6b 83       	std	Y+3, r22	; 0x03

   char x;
    x= DIO_READ_PIN(portname,pinnumber);
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	6b 81       	ldd	r22, Y+3	; 0x03
    1760:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_READ_PIN>
    1764:	89 83       	std	Y+1, r24	; 0x01
 return x;
    1766:	89 81       	ldd	r24, Y+1	; 0x01

}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DIO_set_direction_pin>:

#include <stdio.h>
#include "dio.h"
#include <avr/io.h>
void DIO_set_direction_pin(char portname,char pinnumber , char direction )
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <DIO_set_direction_pin+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <DIO_set_direction_pin+0x8>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	6a 83       	std	Y+2, r22	; 0x02
    1786:	4b 83       	std	Y+3, r20	; 0x03

switch(portname)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	84 34       	cpi	r24, 0x44	; 68
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <DIO_set_direction_pin+0x2a>
    179c:	b9 c0       	rjmp	.+370    	; 0x1910 <DIO_set_direction_pin+0x19c>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	25 34       	cpi	r18, 0x45	; 69
    17a4:	31 05       	cpc	r19, r1
    17a6:	94 f4       	brge	.+36     	; 0x17cc <DIO_set_direction_pin+0x58>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	82 34       	cpi	r24, 0x42	; 66
    17ae:	91 05       	cpc	r25, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <DIO_set_direction_pin+0x40>
    17b2:	56 c0       	rjmp	.+172    	; 0x1860 <DIO_set_direction_pin+0xec>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	23 34       	cpi	r18, 0x43	; 67
    17ba:	31 05       	cpc	r19, r1
    17bc:	0c f0       	brlt	.+2      	; 0x17c0 <DIO_set_direction_pin+0x4c>
    17be:	7c c0       	rjmp	.+248    	; 0x18b8 <DIO_set_direction_pin+0x144>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	81 34       	cpi	r24, 0x41	; 65
    17c6:	91 05       	cpc	r25, r1
    17c8:	f9 f0       	breq	.+62     	; 0x1808 <DIO_set_direction_pin+0x94>
    17ca:	cd c0       	rjmp	.+410    	; 0x1966 <DIO_set_direction_pin+0x1f2>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	22 36       	cpi	r18, 0x62	; 98
    17d2:	31 05       	cpc	r19, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <DIO_set_direction_pin+0x64>
    17d6:	44 c0       	rjmp	.+136    	; 0x1860 <DIO_set_direction_pin+0xec>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	83 36       	cpi	r24, 0x63	; 99
    17de:	91 05       	cpc	r25, r1
    17e0:	34 f4       	brge	.+12     	; 0x17ee <DIO_set_direction_pin+0x7a>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	21 36       	cpi	r18, 0x61	; 97
    17e8:	31 05       	cpc	r19, r1
    17ea:	71 f0       	breq	.+28     	; 0x1808 <DIO_set_direction_pin+0x94>
    17ec:	bc c0       	rjmp	.+376    	; 0x1966 <DIO_set_direction_pin+0x1f2>
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	83 36       	cpi	r24, 0x63	; 99
    17f4:	91 05       	cpc	r25, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_set_direction_pin+0x86>
    17f8:	5f c0       	rjmp	.+190    	; 0x18b8 <DIO_set_direction_pin+0x144>
    17fa:	2c 81       	ldd	r18, Y+4	; 0x04
    17fc:	3d 81       	ldd	r19, Y+5	; 0x05
    17fe:	24 36       	cpi	r18, 0x64	; 100
    1800:	31 05       	cpc	r19, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <DIO_set_direction_pin+0x92>
    1804:	85 c0       	rjmp	.+266    	; 0x1910 <DIO_set_direction_pin+0x19c>
    1806:	af c0       	rjmp	.+350    	; 0x1966 <DIO_set_direction_pin+0x1f2>
       {
    case 'A':
    case 'a':
       if (direction==1)
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	a1 f4       	brne	.+40     	; 0x1836 <DIO_set_direction_pin+0xc2>
        {
           DDRA|=(1<<pinnumber);
    180e:	aa e3       	ldi	r26, 0x3A	; 58
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_set_direction_pin+0xb8>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_set_direction_pin+0xb4>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	98 c0       	rjmp	.+304    	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
       else
        {
           DDRA&=(~(1<<pinnumber));
    1836:	aa e3       	ldi	r26, 0x3A	; 58
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	ea e3       	ldi	r30, 0x3A	; 58
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_set_direction_pin+0xe0>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_set_direction_pin+0xdc>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	83 c0       	rjmp	.+262    	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
        break;

    case 'B':
    case 'b':
        if (direction==1)
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	a1 f4       	brne	.+40     	; 0x188e <DIO_set_direction_pin+0x11a>
        {
            DDRB|=(1<<pinnumber);
    1866:	a7 e3       	ldi	r26, 0x37	; 55
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e7 e3       	ldi	r30, 0x37	; 55
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_set_direction_pin+0x110>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_set_direction_pin+0x10c>
    1888:	84 2b       	or	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	6c c0       	rjmp	.+216    	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
       else
        {
            DDRB&=(~(1<<pinnumber));
    188e:	a7 e3       	ldi	r26, 0x37	; 55
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e7 e3       	ldi	r30, 0x37	; 55
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_set_direction_pin+0x138>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_set_direction_pin+0x134>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	57 c0       	rjmp	.+174    	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
        break;

    case 'C':
    case 'c':
        if (direction==1)
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	a1 f4       	brne	.+40     	; 0x18e6 <DIO_set_direction_pin+0x172>
        {
            DDRC|=(1<<pinnumber);
    18be:	a4 e3       	ldi	r26, 0x34	; 52
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e4 e3       	ldi	r30, 0x34	; 52
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_set_direction_pin+0x168>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_set_direction_pin+0x164>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	40 c0       	rjmp	.+128    	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
       else
        {
            DDRC&=(~(1<<pinnumber));
    18e6:	a4 e3       	ldi	r26, 0x34	; 52
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e4 e3       	ldi	r30, 0x34	; 52
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_set_direction_pin+0x190>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_set_direction_pin+0x18c>
    1908:	80 95       	com	r24
    190a:	84 23       	and	r24, r20
    190c:	8c 93       	st	X, r24
    190e:	2b c0       	rjmp	.+86     	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
        break;

    case 'D':
    case 'd':
        if (direction==1)
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	a1 f4       	brne	.+40     	; 0x193e <DIO_set_direction_pin+0x1ca>
        {
            DDRD|=(1<<pinnumber);
    1916:	a1 e3       	ldi	r26, 0x31	; 49
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e1 e3       	ldi	r30, 0x31	; 49
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_set_direction_pin+0x1c0>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_set_direction_pin+0x1bc>
    1938:	84 2b       	or	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <DIO_set_direction_pin+0x1f2>
        }
       else
        {
            DDRD&=(~(1<<pinnumber));
    193e:	a1 e3       	ldi	r26, 0x31	; 49
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e1 e3       	ldi	r30, 0x31	; 49
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_set_direction_pin+0x1e8>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_set_direction_pin+0x1e4>
    1960:	80 95       	com	r24
    1962:	84 23       	and	r24, r20
    1964:	8c 93       	st	X, r24
        }
        break;
       }
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <DIO_WRITE_PIN>:

void DIO_WRITE_PIN(char portname,char pinnumber , char outputvalue )
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <DIO_WRITE_PIN+0x6>
    197c:	00 d0       	rcall	.+0      	; 0x197e <DIO_WRITE_PIN+0x8>
    197e:	0f 92       	push	r0
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	6a 83       	std	Y+2, r22	; 0x02
    1988:	4b 83       	std	Y+3, r20	; 0x03

  switch(portname)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3d 83       	std	Y+5, r19	; 0x05
    1992:	2c 83       	std	Y+4, r18	; 0x04
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	84 34       	cpi	r24, 0x44	; 68
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <DIO_WRITE_PIN+0x2a>
    199e:	b9 c0       	rjmp	.+370    	; 0x1b12 <DIO_WRITE_PIN+0x19c>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	25 34       	cpi	r18, 0x45	; 69
    19a6:	31 05       	cpc	r19, r1
    19a8:	94 f4       	brge	.+36     	; 0x19ce <DIO_WRITE_PIN+0x58>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	82 34       	cpi	r24, 0x42	; 66
    19b0:	91 05       	cpc	r25, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <DIO_WRITE_PIN+0x40>
    19b4:	56 c0       	rjmp	.+172    	; 0x1a62 <DIO_WRITE_PIN+0xec>
    19b6:	2c 81       	ldd	r18, Y+4	; 0x04
    19b8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ba:	23 34       	cpi	r18, 0x43	; 67
    19bc:	31 05       	cpc	r19, r1
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <DIO_WRITE_PIN+0x4c>
    19c0:	7c c0       	rjmp	.+248    	; 0x1aba <DIO_WRITE_PIN+0x144>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	81 34       	cpi	r24, 0x41	; 65
    19c8:	91 05       	cpc	r25, r1
    19ca:	f9 f0       	breq	.+62     	; 0x1a0a <DIO_WRITE_PIN+0x94>
    19cc:	cd c0       	rjmp	.+410    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	22 36       	cpi	r18, 0x62	; 98
    19d4:	31 05       	cpc	r19, r1
    19d6:	09 f4       	brne	.+2      	; 0x19da <DIO_WRITE_PIN+0x64>
    19d8:	44 c0       	rjmp	.+136    	; 0x1a62 <DIO_WRITE_PIN+0xec>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	83 36       	cpi	r24, 0x63	; 99
    19e0:	91 05       	cpc	r25, r1
    19e2:	34 f4       	brge	.+12     	; 0x19f0 <DIO_WRITE_PIN+0x7a>
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	21 36       	cpi	r18, 0x61	; 97
    19ea:	31 05       	cpc	r19, r1
    19ec:	71 f0       	breq	.+28     	; 0x1a0a <DIO_WRITE_PIN+0x94>
    19ee:	bc c0       	rjmp	.+376    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	83 36       	cpi	r24, 0x63	; 99
    19f6:	91 05       	cpc	r25, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <DIO_WRITE_PIN+0x86>
    19fa:	5f c0       	rjmp	.+190    	; 0x1aba <DIO_WRITE_PIN+0x144>
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	24 36       	cpi	r18, 0x64	; 100
    1a02:	31 05       	cpc	r19, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <DIO_WRITE_PIN+0x92>
    1a06:	85 c0       	rjmp	.+266    	; 0x1b12 <DIO_WRITE_PIN+0x19c>
    1a08:	af c0       	rjmp	.+350    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
       {
    case 'A':
    case 'a':
       if (outputvalue==1)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	a1 f4       	brne	.+40     	; 0x1a38 <DIO_WRITE_PIN+0xc2>
        {
           PORTA|=(1<<pinnumber);
    1a10:	ab e3       	ldi	r26, 0x3B	; 59
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e3       	ldi	r30, 0x3B	; 59
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_WRITE_PIN+0xb8>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_WRITE_PIN+0xb4>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	98 c0       	rjmp	.+304    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
       else
        {
           PORTA&=(~(1<<pinnumber));
    1a38:	ab e3       	ldi	r26, 0x3B	; 59
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	eb e3       	ldi	r30, 0x3B	; 59
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_WRITE_PIN+0xe0>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_WRITE_PIN+0xdc>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	83 c0       	rjmp	.+262    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
        break;

    case 'B':
    case 'b':
        if (outputvalue==1)
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	a1 f4       	brne	.+40     	; 0x1a90 <DIO_WRITE_PIN+0x11a>
        {
            PORTB|=(1<<pinnumber);
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_WRITE_PIN+0x110>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_WRITE_PIN+0x10c>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	6c c0       	rjmp	.+216    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
       else
        {
            PORTB&=(~(1<<pinnumber));
    1a90:	a8 e3       	ldi	r26, 0x38	; 56
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e8 e3       	ldi	r30, 0x38	; 56
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_WRITE_PIN+0x138>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_WRITE_PIN+0x134>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	57 c0       	rjmp	.+174    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
        break;

    case 'C':
    case 'c':
        if (outputvalue==1)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	a1 f4       	brne	.+40     	; 0x1ae8 <DIO_WRITE_PIN+0x172>
        {
            PORTC|=(1<<pinnumber);
    1ac0:	a5 e3       	ldi	r26, 0x35	; 53
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_WRITE_PIN+0x168>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_WRITE_PIN+0x164>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	40 c0       	rjmp	.+128    	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
       else
        {
            PORTC&=(~(1<<pinnumber));
    1ae8:	a5 e3       	ldi	r26, 0x35	; 53
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_WRITE_PIN+0x190>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_WRITE_PIN+0x18c>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	2b c0       	rjmp	.+86     	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
        break;

    case 'D':
    case 'd':
        if (outputvalue==1)
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	a1 f4       	brne	.+40     	; 0x1b40 <DIO_WRITE_PIN+0x1ca>
        {
            PORTD|=(1<<pinnumber);
    1b18:	a2 e3       	ldi	r26, 0x32	; 50
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e3       	ldi	r30, 0x32	; 50
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_WRITE_PIN+0x1c0>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_WRITE_PIN+0x1bc>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <DIO_WRITE_PIN+0x1f2>
        }
       else
        {
            PORTD&=(~(1<<pinnumber));
    1b40:	a2 e3       	ldi	r26, 0x32	; 50
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e2 e3       	ldi	r30, 0x32	; 50
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_WRITE_PIN+0x1e8>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_WRITE_PIN+0x1e4>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
        }
        break;
       }
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <DIO_TOGGLE_PIN>:
void DIO_TOGGLE_PIN(char portname, char pinnumber)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <DIO_TOGGLE_PIN+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <DIO_TOGGLE_PIN+0x8>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	6a 83       	std	Y+2, r22	; 0x02
     switch(portname)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3c 83       	std	Y+4, r19	; 0x04
    1b90:	2b 83       	std	Y+3, r18	; 0x03
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	84 34       	cpi	r24, 0x44	; 68
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <DIO_TOGGLE_PIN+0x26>
    1b9c:	6d c0       	rjmp	.+218    	; 0x1c78 <DIO_TOGGLE_PIN+0x100>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	25 34       	cpi	r18, 0x45	; 69
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	8c f4       	brge	.+34     	; 0x1bca <DIO_TOGGLE_PIN+0x52>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	82 34       	cpi	r24, 0x42	; 66
    1bae:	91 05       	cpc	r25, r1
    1bb0:	d9 f1       	breq	.+118    	; 0x1c28 <DIO_TOGGLE_PIN+0xb0>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	23 34       	cpi	r18, 0x43	; 67
    1bb8:	31 05       	cpc	r19, r1
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <DIO_TOGGLE_PIN+0x46>
    1bbc:	49 c0       	rjmp	.+146    	; 0x1c50 <DIO_TOGGLE_PIN+0xd8>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	81 34       	cpi	r24, 0x41	; 65
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	e1 f0       	breq	.+56     	; 0x1c00 <DIO_TOGGLE_PIN+0x88>
    1bc8:	6a c0       	rjmp	.+212    	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	22 36       	cpi	r18, 0x62	; 98
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	51 f1       	breq	.+84     	; 0x1c28 <DIO_TOGGLE_PIN+0xb0>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	83 36       	cpi	r24, 0x63	; 99
    1bda:	91 05       	cpc	r25, r1
    1bdc:	34 f4       	brge	.+12     	; 0x1bea <DIO_TOGGLE_PIN+0x72>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	21 36       	cpi	r18, 0x61	; 97
    1be4:	31 05       	cpc	r19, r1
    1be6:	61 f0       	breq	.+24     	; 0x1c00 <DIO_TOGGLE_PIN+0x88>
    1be8:	5a c0       	rjmp	.+180    	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	83 36       	cpi	r24, 0x63	; 99
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	71 f1       	breq	.+92     	; 0x1c50 <DIO_TOGGLE_PIN+0xd8>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	24 36       	cpi	r18, 0x64	; 100
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	e9 f1       	breq	.+122    	; 0x1c78 <DIO_TOGGLE_PIN+0x100>
    1bfe:	4f c0       	rjmp	.+158    	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
       {
    case 'A':
    case 'a':
      PORTA^=(1<<pinnumber);
    1c00:	ab e3       	ldi	r26, 0x3B	; 59
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	eb e3       	ldi	r30, 0x3B	; 59
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_TOGGLE_PIN+0xa6>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_TOGGLE_PIN+0xa2>
    1c22:	84 27       	eor	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	3b c0       	rjmp	.+118    	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
    break;

    case 'B':
    case 'b':
      PORTB^=(1<<pinnumber);
    1c28:	a8 e3       	ldi	r26, 0x38	; 56
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_TOGGLE_PIN+0xce>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_TOGGLE_PIN+0xca>
    1c4a:	84 27       	eor	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
    break;
    case 'C':
    case 'c':
      PORTC^=(1<<pinnumber);
    1c50:	a5 e3       	ldi	r26, 0x35	; 53
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e3       	ldi	r30, 0x35	; 53
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_TOGGLE_PIN+0xf6>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_TOGGLE_PIN+0xf2>
    1c72:	84 27       	eor	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <DIO_TOGGLE_PIN+0x126>
    break;
    case 'D':
    case 'd':
       PORTD^=(1<<pinnumber);
    1c78:	a2 e3       	ldi	r26, 0x32	; 50
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e3       	ldi	r30, 0x32	; 50
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_TOGGLE_PIN+0x11e>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_TOGGLE_PIN+0x11a>
    1c9a:	84 27       	eor	r24, r20
    1c9c:	8c 93       	st	X, r24
    break;
       }

}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DIO_READ_PIN>:
char DIO_READ_PIN(char portname, char pinnumber )
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_READ_PIN+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <DIO_READ_PIN+0x8>
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	6b 83       	std	Y+3, r22	; 0x03
    char readpin=0;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
     switch(portname)
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3d 83       	std	Y+5, r19	; 0x05
    1cc8:	2c 83       	std	Y+4, r18	; 0x04
    1cca:	4c 81       	ldd	r20, Y+4	; 0x04
    1ccc:	5d 81       	ldd	r21, Y+5	; 0x05
    1cce:	44 34       	cpi	r20, 0x44	; 68
    1cd0:	51 05       	cpc	r21, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <DIO_READ_PIN+0x2a>
    1cd4:	8e c0       	rjmp	.+284    	; 0x1df2 <DIO_READ_PIN+0x146>
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	85 34       	cpi	r24, 0x45	; 69
    1cdc:	91 05       	cpc	r25, r1
    1cde:	94 f4       	brge	.+36     	; 0x1d04 <DIO_READ_PIN+0x58>
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	22 34       	cpi	r18, 0x42	; 66
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <DIO_READ_PIN+0x40>
    1cea:	47 c0       	rjmp	.+142    	; 0x1d7a <DIO_READ_PIN+0xce>
    1cec:	4c 81       	ldd	r20, Y+4	; 0x04
    1cee:	5d 81       	ldd	r21, Y+5	; 0x05
    1cf0:	43 34       	cpi	r20, 0x43	; 67
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	0c f0       	brlt	.+2      	; 0x1cf8 <DIO_READ_PIN+0x4c>
    1cf6:	5f c0       	rjmp	.+190    	; 0x1db6 <DIO_READ_PIN+0x10a>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	81 34       	cpi	r24, 0x41	; 65
    1cfe:	91 05       	cpc	r25, r1
    1d00:	f1 f0       	breq	.+60     	; 0x1d3e <DIO_READ_PIN+0x92>
    1d02:	94 c0       	rjmp	.+296    	; 0x1e2c <DIO_READ_PIN+0x180>
    1d04:	2c 81       	ldd	r18, Y+4	; 0x04
    1d06:	3d 81       	ldd	r19, Y+5	; 0x05
    1d08:	22 36       	cpi	r18, 0x62	; 98
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	b1 f1       	breq	.+108    	; 0x1d7a <DIO_READ_PIN+0xce>
    1d0e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d10:	5d 81       	ldd	r21, Y+5	; 0x05
    1d12:	43 36       	cpi	r20, 0x63	; 99
    1d14:	51 05       	cpc	r21, r1
    1d16:	34 f4       	brge	.+12     	; 0x1d24 <DIO_READ_PIN+0x78>
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1c:	81 36       	cpi	r24, 0x61	; 97
    1d1e:	91 05       	cpc	r25, r1
    1d20:	71 f0       	breq	.+28     	; 0x1d3e <DIO_READ_PIN+0x92>
    1d22:	84 c0       	rjmp	.+264    	; 0x1e2c <DIO_READ_PIN+0x180>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	23 36       	cpi	r18, 0x63	; 99
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <DIO_READ_PIN+0x84>
    1d2e:	43 c0       	rjmp	.+134    	; 0x1db6 <DIO_READ_PIN+0x10a>
    1d30:	4c 81       	ldd	r20, Y+4	; 0x04
    1d32:	5d 81       	ldd	r21, Y+5	; 0x05
    1d34:	44 36       	cpi	r20, 0x64	; 100
    1d36:	51 05       	cpc	r21, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <DIO_READ_PIN+0x90>
    1d3a:	5b c0       	rjmp	.+182    	; 0x1df2 <DIO_READ_PIN+0x146>
    1d3c:	77 c0       	rjmp	.+238    	; 0x1e2c <DIO_READ_PIN+0x180>
       {
    case 'A':
    case 'a':
      readpin=((PINA&(1<<pinnumber))>>pinnumber);
    1d3e:	e9 e3       	ldi	r30, 0x39	; 57
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	48 2f       	mov	r20, r24
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_READ_PIN+0xac>
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	2a 95       	dec	r18
    1d5a:	e2 f7       	brpl	.-8      	; 0x1d54 <DIO_READ_PIN+0xa8>
    1d5c:	9a 01       	movw	r18, r20
    1d5e:	28 23       	and	r18, r24
    1d60:	39 23       	and	r19, r25
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a9 01       	movw	r20, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_READ_PIN+0xc4>
    1d6c:	55 95       	asr	r21
    1d6e:	47 95       	ror	r20
    1d70:	8a 95       	dec	r24
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_READ_PIN+0xc0>
    1d74:	ca 01       	movw	r24, r20
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	59 c0       	rjmp	.+178    	; 0x1e2c <DIO_READ_PIN+0x180>
    break;

    case 'B':
    case 'b':
      readpin=((PINB&(1<<pinnumber))>>pinnumber);
    1d7a:	e6 e3       	ldi	r30, 0x36	; 54
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_READ_PIN+0xe8>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	2a 95       	dec	r18
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_READ_PIN+0xe4>
    1d98:	9a 01       	movw	r18, r20
    1d9a:	28 23       	and	r18, r24
    1d9c:	39 23       	and	r19, r25
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a9 01       	movw	r20, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_READ_PIN+0x100>
    1da8:	55 95       	asr	r21
    1daa:	47 95       	ror	r20
    1dac:	8a 95       	dec	r24
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_READ_PIN+0xfc>
    1db0:	ca 01       	movw	r24, r20
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	3b c0       	rjmp	.+118    	; 0x1e2c <DIO_READ_PIN+0x180>
    break;
    case 'C':
    case 'c':
      readpin=((PINC&(1<<pinnumber))>>pinnumber);
    1db6:	e3 e3       	ldi	r30, 0x33	; 51
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_READ_PIN+0x124>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	2a 95       	dec	r18
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_READ_PIN+0x120>
    1dd4:	9a 01       	movw	r18, r20
    1dd6:	28 23       	and	r18, r24
    1dd8:	39 23       	and	r19, r25
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a9 01       	movw	r20, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_READ_PIN+0x13c>
    1de4:	55 95       	asr	r21
    1de6:	47 95       	ror	r20
    1de8:	8a 95       	dec	r24
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_READ_PIN+0x138>
    1dec:	ca 01       	movw	r24, r20
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <DIO_READ_PIN+0x180>
    break;
    case 'D':
    case 'd':
      readpin=((PIND&(1<<pinnumber))>>pinnumber);
    1df2:	e0 e3       	ldi	r30, 0x30	; 48
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_READ_PIN+0x160>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	2a 95       	dec	r18
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_READ_PIN+0x15c>
    1e10:	9a 01       	movw	r18, r20
    1e12:	28 23       	and	r18, r24
    1e14:	39 23       	and	r19, r25
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_READ_PIN+0x178>
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	8a 95       	dec	r24
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_READ_PIN+0x174>
    1e28:	ca 01       	movw	r24, r20
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    break;

    }
       return readpin;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <DIO_direction_port>:
void DIO_direction_port( char portname, char direction)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <DIO_direction_port+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <DIO_direction_port+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	3c 83       	std	Y+4, r19	; 0x04
    1e56:	2b 83       	std	Y+3, r18	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	82 34       	cpi	r24, 0x42	; 66
    1e5e:	91 05       	cpc	r25, r1
    1e60:	d9 f0       	breq	.+54     	; 0x1e98 <DIO_direction_port+0x5a>
    1e62:	2b 81       	ldd	r18, Y+3	; 0x03
    1e64:	3c 81       	ldd	r19, Y+4	; 0x04
    1e66:	23 34       	cpi	r18, 0x43	; 67
    1e68:	31 05       	cpc	r19, r1
    1e6a:	34 f4       	brge	.+12     	; 0x1e78 <DIO_direction_port+0x3a>
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	81 34       	cpi	r24, 0x41	; 65
    1e72:	91 05       	cpc	r25, r1
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <DIO_direction_port+0x50>
    1e76:	1e c0       	rjmp	.+60     	; 0x1eb4 <DIO_direction_port+0x76>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	23 34       	cpi	r18, 0x43	; 67
    1e7e:	31 05       	cpc	r19, r1
    1e80:	81 f0       	breq	.+32     	; 0x1ea2 <DIO_direction_port+0x64>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	84 34       	cpi	r24, 0x44	; 68
    1e88:	91 05       	cpc	r25, r1
    1e8a:	81 f0       	breq	.+32     	; 0x1eac <DIO_direction_port+0x6e>
    1e8c:	13 c0       	rjmp	.+38     	; 0x1eb4 <DIO_direction_port+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    1e8e:	ea e3       	ldi	r30, 0x3A	; 58
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
    1e96:	0e c0       	rjmp	.+28     	; 0x1eb4 <DIO_direction_port+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1e98:	e7 e3       	ldi	r30, 0x37	; 55
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	80 83       	st	Z, r24
    1ea0:	09 c0       	rjmp	.+18     	; 0x1eb4 <DIO_direction_port+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    1ea2:	e4 e3       	ldi	r30, 0x34	; 52
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	80 83       	st	Z, r24
    1eaa:	04 c0       	rjmp	.+8      	; 0x1eb4 <DIO_direction_port+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1eac:	e1 e3       	ldi	r30, 0x31	; 49
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	80 83       	st	Z, r24
		break ;

	}

  }
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <DIO_write_port>:
void DIO_write_port( char portname, char portvalue)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <DIO_write_port+0x6>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <DIO_write_port+0x8>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	3c 83       	std	Y+4, r19	; 0x04
    1eda:	2b 83       	std	Y+3, r18	; 0x03
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	82 34       	cpi	r24, 0x42	; 66
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	d9 f0       	breq	.+54     	; 0x1f1c <DIO_write_port+0x5a>
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	23 34       	cpi	r18, 0x43	; 67
    1eec:	31 05       	cpc	r19, r1
    1eee:	34 f4       	brge	.+12     	; 0x1efc <DIO_write_port+0x3a>
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	81 34       	cpi	r24, 0x41	; 65
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	61 f0       	breq	.+24     	; 0x1f12 <DIO_write_port+0x50>
    1efa:	1e c0       	rjmp	.+60     	; 0x1f38 <DIO_write_port+0x76>
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	23 34       	cpi	r18, 0x43	; 67
    1f02:	31 05       	cpc	r19, r1
    1f04:	81 f0       	breq	.+32     	; 0x1f26 <DIO_write_port+0x64>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	84 34       	cpi	r24, 0x44	; 68
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	81 f0       	breq	.+32     	; 0x1f30 <DIO_write_port+0x6e>
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1f12:	eb e3       	ldi	r30, 0x3B	; 59
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	80 83       	st	Z, r24
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1f1c:	e8 e3       	ldi	r30, 0x38	; 56
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	80 83       	st	Z, r24
    1f24:	09 c0       	rjmp	.+18     	; 0x1f38 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1f26:	e5 e3       	ldi	r30, 0x35	; 53
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 83       	st	Z, r24
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    1f30:	e2 e3       	ldi	r30, 0x32	; 50
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	80 83       	st	Z, r24
		break ;

	}
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <DIO_TOGGLE_port>:
void DIO_TOGGLE_port(char portname)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <DIO_TOGGLE_port+0x6>
    1f4c:	0f 92       	push	r0
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3b 83       	std	Y+3, r19	; 0x03
    1f5c:	2a 83       	std	Y+2, r18	; 0x02
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	84 34       	cpi	r24, 0x44	; 68
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <DIO_TOGGLE_port+0x24>
    1f68:	48 c0       	rjmp	.+144    	; 0x1ffa <DIO_TOGGLE_port+0xb4>
    1f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f6c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f6e:	25 34       	cpi	r18, 0x45	; 69
    1f70:	31 05       	cpc	r19, r1
    1f72:	84 f4       	brge	.+32     	; 0x1f94 <DIO_TOGGLE_port+0x4e>
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	82 34       	cpi	r24, 0x42	; 66
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	71 f1       	breq	.+92     	; 0x1fda <DIO_TOGGLE_port+0x94>
    1f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f80:	3b 81       	ldd	r19, Y+3	; 0x03
    1f82:	23 34       	cpi	r18, 0x43	; 67
    1f84:	31 05       	cpc	r19, r1
    1f86:	8c f5       	brge	.+98     	; 0x1fea <DIO_TOGGLE_port+0xa4>
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	81 34       	cpi	r24, 0x41	; 65
    1f8e:	91 05       	cpc	r25, r1
    1f90:	e1 f0       	breq	.+56     	; 0x1fca <DIO_TOGGLE_port+0x84>
    1f92:	3a c0       	rjmp	.+116    	; 0x2008 <DIO_TOGGLE_port+0xc2>
    1f94:	2a 81       	ldd	r18, Y+2	; 0x02
    1f96:	3b 81       	ldd	r19, Y+3	; 0x03
    1f98:	22 36       	cpi	r18, 0x62	; 98
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	f1 f0       	breq	.+60     	; 0x1fda <DIO_TOGGLE_port+0x94>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	83 36       	cpi	r24, 0x63	; 99
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	34 f4       	brge	.+12     	; 0x1fb4 <DIO_TOGGLE_port+0x6e>
    1fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1faa:	3b 81       	ldd	r19, Y+3	; 0x03
    1fac:	21 36       	cpi	r18, 0x61	; 97
    1fae:	31 05       	cpc	r19, r1
    1fb0:	61 f0       	breq	.+24     	; 0x1fca <DIO_TOGGLE_port+0x84>
    1fb2:	2a c0       	rjmp	.+84     	; 0x2008 <DIO_TOGGLE_port+0xc2>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	83 36       	cpi	r24, 0x63	; 99
    1fba:	91 05       	cpc	r25, r1
    1fbc:	b1 f0       	breq	.+44     	; 0x1fea <DIO_TOGGLE_port+0xa4>
    1fbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc2:	24 36       	cpi	r18, 0x64	; 100
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	c9 f0       	breq	.+50     	; 0x1ffa <DIO_TOGGLE_port+0xb4>
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <DIO_TOGGLE_port+0xc2>
	{
		case 'A' :
        case 'a' :

		    PORTA^=0Xff;
    1fca:	ab e3       	ldi	r26, 0x3B	; 59
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	eb e3       	ldi	r30, 0x3B	; 59
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 95       	com	r24
    1fd6:	8c 93       	st	X, r24
    1fd8:	17 c0       	rjmp	.+46     	; 0x2008 <DIO_TOGGLE_port+0xc2>
		break ;
		case 'B':
        case 'b' :

		    PORTB^=0Xff;
    1fda:	a8 e3       	ldi	r26, 0x38	; 56
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e8 e3       	ldi	r30, 0x38	; 56
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 95       	com	r24
    1fe6:	8c 93       	st	X, r24
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <DIO_TOGGLE_port+0xc2>
		break ;
		case 'C' :
        case 'c' :

		    PORTC^=0Xff;
    1fea:	a5 e3       	ldi	r26, 0x35	; 53
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e5 e3       	ldi	r30, 0x35	; 53
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 95       	com	r24
    1ff6:	8c 93       	st	X, r24
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <DIO_TOGGLE_port+0xc2>
		break ;
		case 'D':
        case 'd' :

		    PORTD^=0Xff;
    1ffa:	a2 e3       	ldi	r26, 0x32	; 50
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e2 e3       	ldi	r30, 0x32	; 50
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 95       	com	r24
    2006:	8c 93       	st	X, r24
		break ;

	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <DIO_read_port>:
 char DIO_read_port( char portname)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	00 d0       	rcall	.+0      	; 0x201a <DIO_read_port+0x6>
    201a:	00 d0       	rcall	.+0      	; 0x201c <DIO_read_port+0x8>
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	8a 83       	std	Y+2, r24	; 0x02
	 char readport=0;
    2022:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3c 83       	std	Y+4, r19	; 0x04
    202c:	2b 83       	std	Y+3, r18	; 0x03
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	84 34       	cpi	r24, 0x44	; 68
    2034:	91 05       	cpc	r25, r1
    2036:	09 f4       	brne	.+2      	; 0x203a <DIO_read_port+0x26>
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <DIO_read_port+0xa4>
    203a:	2b 81       	ldd	r18, Y+3	; 0x03
    203c:	3c 81       	ldd	r19, Y+4	; 0x04
    203e:	25 34       	cpi	r18, 0x45	; 69
    2040:	31 05       	cpc	r19, r1
    2042:	84 f4       	brge	.+32     	; 0x2064 <DIO_read_port+0x50>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	82 34       	cpi	r24, 0x42	; 66
    204a:	91 05       	cpc	r25, r1
    204c:	59 f1       	breq	.+86     	; 0x20a4 <DIO_read_port+0x90>
    204e:	2b 81       	ldd	r18, Y+3	; 0x03
    2050:	3c 81       	ldd	r19, Y+4	; 0x04
    2052:	23 34       	cpi	r18, 0x43	; 67
    2054:	31 05       	cpc	r19, r1
    2056:	5c f5       	brge	.+86     	; 0x20ae <DIO_read_port+0x9a>
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	81 34       	cpi	r24, 0x41	; 65
    205e:	91 05       	cpc	r25, r1
    2060:	e1 f0       	breq	.+56     	; 0x209a <DIO_read_port+0x86>
    2062:	2e c0       	rjmp	.+92     	; 0x20c0 <DIO_read_port+0xac>
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	22 36       	cpi	r18, 0x62	; 98
    206a:	31 05       	cpc	r19, r1
    206c:	d9 f0       	breq	.+54     	; 0x20a4 <DIO_read_port+0x90>
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	83 36       	cpi	r24, 0x63	; 99
    2074:	91 05       	cpc	r25, r1
    2076:	34 f4       	brge	.+12     	; 0x2084 <DIO_read_port+0x70>
    2078:	2b 81       	ldd	r18, Y+3	; 0x03
    207a:	3c 81       	ldd	r19, Y+4	; 0x04
    207c:	21 36       	cpi	r18, 0x61	; 97
    207e:	31 05       	cpc	r19, r1
    2080:	61 f0       	breq	.+24     	; 0x209a <DIO_read_port+0x86>
    2082:	1e c0       	rjmp	.+60     	; 0x20c0 <DIO_read_port+0xac>
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	83 36       	cpi	r24, 0x63	; 99
    208a:	91 05       	cpc	r25, r1
    208c:	81 f0       	breq	.+32     	; 0x20ae <DIO_read_port+0x9a>
    208e:	2b 81       	ldd	r18, Y+3	; 0x03
    2090:	3c 81       	ldd	r19, Y+4	; 0x04
    2092:	24 36       	cpi	r18, 0x64	; 100
    2094:	31 05       	cpc	r19, r1
    2096:	81 f0       	breq	.+32     	; 0x20b8 <DIO_read_port+0xa4>
    2098:	13 c0       	rjmp	.+38     	; 0x20c0 <DIO_read_port+0xac>
	{
		case 'A' :
		case 'a' :
		readport=PINA; // read the value of port A
    209a:	e9 e3       	ldi	r30, 0x39	; 57
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	0e c0       	rjmp	.+28     	; 0x20c0 <DIO_read_port+0xac>
		break ;
		case 'B' :
		case 'b' :
		readport=PINB; // read the value of port B
    20a4:	e6 e3       	ldi	r30, 0x36	; 54
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	09 c0       	rjmp	.+18     	; 0x20c0 <DIO_read_port+0xac>
		break ;
		case 'C' :
		case 'c' :
		readport=PINC; // read the value of port C
    20ae:	e3 e3       	ldi	r30, 0x33	; 51
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	04 c0       	rjmp	.+8      	; 0x20c0 <DIO_read_port+0xac>
		break ;
		case 'D' :
		case 'd' :
		readport=PIND; // read the value of port D
    20b8:	e0 e3       	ldi	r30, 0x30	; 48
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	return readport;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <DIO_connectpullup>:
	void DIO_connectpullup(char portname ,char pinnumber, char connect_pullup)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <DIO_connectpullup+0x6>
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <DIO_connectpullup+0x8>
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	6a 83       	std	Y+2, r22	; 0x02
    20e2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3d 83       	std	Y+5, r19	; 0x05
    20ec:	2c 83       	std	Y+4, r18	; 0x04
    20ee:	8c 81       	ldd	r24, Y+4	; 0x04
    20f0:	9d 81       	ldd	r25, Y+5	; 0x05
    20f2:	84 34       	cpi	r24, 0x44	; 68
    20f4:	91 05       	cpc	r25, r1
    20f6:	09 f4       	brne	.+2      	; 0x20fa <DIO_connectpullup+0x2a>
    20f8:	b9 c0       	rjmp	.+370    	; 0x226c <DIO_connectpullup+0x19c>
    20fa:	2c 81       	ldd	r18, Y+4	; 0x04
    20fc:	3d 81       	ldd	r19, Y+5	; 0x05
    20fe:	25 34       	cpi	r18, 0x45	; 69
    2100:	31 05       	cpc	r19, r1
    2102:	94 f4       	brge	.+36     	; 0x2128 <DIO_connectpullup+0x58>
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	82 34       	cpi	r24, 0x42	; 66
    210a:	91 05       	cpc	r25, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <DIO_connectpullup+0x40>
    210e:	56 c0       	rjmp	.+172    	; 0x21bc <DIO_connectpullup+0xec>
    2110:	2c 81       	ldd	r18, Y+4	; 0x04
    2112:	3d 81       	ldd	r19, Y+5	; 0x05
    2114:	23 34       	cpi	r18, 0x43	; 67
    2116:	31 05       	cpc	r19, r1
    2118:	0c f0       	brlt	.+2      	; 0x211c <DIO_connectpullup+0x4c>
    211a:	7c c0       	rjmp	.+248    	; 0x2214 <DIO_connectpullup+0x144>
    211c:	8c 81       	ldd	r24, Y+4	; 0x04
    211e:	9d 81       	ldd	r25, Y+5	; 0x05
    2120:	81 34       	cpi	r24, 0x41	; 65
    2122:	91 05       	cpc	r25, r1
    2124:	f9 f0       	breq	.+62     	; 0x2164 <DIO_connectpullup+0x94>
    2126:	cd c0       	rjmp	.+410    	; 0x22c2 <DIO_connectpullup+0x1f2>
    2128:	2c 81       	ldd	r18, Y+4	; 0x04
    212a:	3d 81       	ldd	r19, Y+5	; 0x05
    212c:	22 36       	cpi	r18, 0x62	; 98
    212e:	31 05       	cpc	r19, r1
    2130:	09 f4       	brne	.+2      	; 0x2134 <DIO_connectpullup+0x64>
    2132:	44 c0       	rjmp	.+136    	; 0x21bc <DIO_connectpullup+0xec>
    2134:	8c 81       	ldd	r24, Y+4	; 0x04
    2136:	9d 81       	ldd	r25, Y+5	; 0x05
    2138:	83 36       	cpi	r24, 0x63	; 99
    213a:	91 05       	cpc	r25, r1
    213c:	34 f4       	brge	.+12     	; 0x214a <DIO_connectpullup+0x7a>
    213e:	2c 81       	ldd	r18, Y+4	; 0x04
    2140:	3d 81       	ldd	r19, Y+5	; 0x05
    2142:	21 36       	cpi	r18, 0x61	; 97
    2144:	31 05       	cpc	r19, r1
    2146:	71 f0       	breq	.+28     	; 0x2164 <DIO_connectpullup+0x94>
    2148:	bc c0       	rjmp	.+376    	; 0x22c2 <DIO_connectpullup+0x1f2>
    214a:	8c 81       	ldd	r24, Y+4	; 0x04
    214c:	9d 81       	ldd	r25, Y+5	; 0x05
    214e:	83 36       	cpi	r24, 0x63	; 99
    2150:	91 05       	cpc	r25, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <DIO_connectpullup+0x86>
    2154:	5f c0       	rjmp	.+190    	; 0x2214 <DIO_connectpullup+0x144>
    2156:	2c 81       	ldd	r18, Y+4	; 0x04
    2158:	3d 81       	ldd	r19, Y+5	; 0x05
    215a:	24 36       	cpi	r18, 0x64	; 100
    215c:	31 05       	cpc	r19, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <DIO_connectpullup+0x92>
    2160:	85 c0       	rjmp	.+266    	; 0x226c <DIO_connectpullup+0x19c>
    2162:	af c0       	rjmp	.+350    	; 0x22c2 <DIO_connectpullup+0x1f2>
       {
    case 'A':
    case 'a':
       if (connect_pullup==1)
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	a1 f4       	brne	.+40     	; 0x2192 <DIO_connectpullup+0xc2>
        {
           PORTA|=(1<<pinnumber);
    216a:	ab e3       	ldi	r26, 0x3B	; 59
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb e3       	ldi	r30, 0x3B	; 59
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <DIO_connectpullup+0xb8>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <DIO_connectpullup+0xb4>
    218c:	84 2b       	or	r24, r20
    218e:	8c 93       	st	X, r24
    2190:	98 c0       	rjmp	.+304    	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
       else
        {
           PORTA&=(~(1<<pinnumber));
    2192:	ab e3       	ldi	r26, 0x3B	; 59
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	eb e3       	ldi	r30, 0x3B	; 59
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <DIO_connectpullup+0xe0>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <DIO_connectpullup+0xdc>
    21b4:	80 95       	com	r24
    21b6:	84 23       	and	r24, r20
    21b8:	8c 93       	st	X, r24
    21ba:	83 c0       	rjmp	.+262    	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
        break;

    case 'B':
    case 'b':
        if (connect_pullup==1)
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	a1 f4       	brne	.+40     	; 0x21ea <DIO_connectpullup+0x11a>
        {
            PORTB|=(1<<pinnumber);
    21c2:	a8 e3       	ldi	r26, 0x38	; 56
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 e3       	ldi	r30, 0x38	; 56
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_connectpullup+0x110>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_connectpullup+0x10c>
    21e4:	84 2b       	or	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	6c c0       	rjmp	.+216    	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
       else
        {
            PORTB&=(~(1<<pinnumber));
    21ea:	a8 e3       	ldi	r26, 0x38	; 56
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 e3       	ldi	r30, 0x38	; 56
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_connectpullup+0x138>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_connectpullup+0x134>
    220c:	80 95       	com	r24
    220e:	84 23       	and	r24, r20
    2210:	8c 93       	st	X, r24
    2212:	57 c0       	rjmp	.+174    	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
        break;

    case 'C':
    case 'c':
        if (connect_pullup==1)
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	a1 f4       	brne	.+40     	; 0x2242 <DIO_connectpullup+0x172>
        {
            PORTC|=(1<<pinnumber);
    221a:	a5 e3       	ldi	r26, 0x35	; 53
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e5 e3       	ldi	r30, 0x35	; 53
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <DIO_connectpullup+0x168>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <DIO_connectpullup+0x164>
    223c:	84 2b       	or	r24, r20
    223e:	8c 93       	st	X, r24
    2240:	40 c0       	rjmp	.+128    	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
       else
        {
            PORTC&=(~(1<<pinnumber));
    2242:	a5 e3       	ldi	r26, 0x35	; 53
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e5 e3       	ldi	r30, 0x35	; 53
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	48 2f       	mov	r20, r24
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 2e       	mov	r0, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <DIO_connectpullup+0x190>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <DIO_connectpullup+0x18c>
    2264:	80 95       	com	r24
    2266:	84 23       	and	r24, r20
    2268:	8c 93       	st	X, r24
    226a:	2b c0       	rjmp	.+86     	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
        break;

    case 'D':
    case 'd':
        if (connect_pullup==1)
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	a1 f4       	brne	.+40     	; 0x229a <DIO_connectpullup+0x1ca>
        {
            PORTD|=(1<<pinnumber);
    2272:	a2 e3       	ldi	r26, 0x32	; 50
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e2 e3       	ldi	r30, 0x32	; 50
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	48 2f       	mov	r20, r24
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	02 2e       	mov	r0, r18
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <DIO_connectpullup+0x1c0>
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	0a 94       	dec	r0
    2292:	e2 f7       	brpl	.-8      	; 0x228c <DIO_connectpullup+0x1bc>
    2294:	84 2b       	or	r24, r20
    2296:	8c 93       	st	X, r24
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <DIO_connectpullup+0x1f2>
        }
       else
        {
            PORTD&=(~(1<<pinnumber));
    229a:	a2 e3       	ldi	r26, 0x32	; 50
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e2 e3       	ldi	r30, 0x32	; 50
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	48 2f       	mov	r20, r24
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	02 2e       	mov	r0, r18
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <DIO_connectpullup+0x1e8>
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	0a 94       	dec	r0
    22ba:	e2 f7       	brpl	.-8      	; 0x22b4 <DIO_connectpullup+0x1e4>
    22bc:	80 95       	com	r24
    22be:	84 23       	and	r24, r20
    22c0:	8c 93       	st	X, r24
        }
        break;
       }
	}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <write_low_nibble>:
void write_low_nibble( char portname, char value)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <write_low_nibble+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	6a 83       	std	Y+2, r22	; 0x02
    DIO_WRITE_PIN(portname,0,((value&(1<<0))>>0)) ;
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	98 2f       	mov	r25, r24
    22e4:	91 70       	andi	r25, 0x01	; 1
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	49 2f       	mov	r20, r25
    22ec:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,1,((value&(1<<1))>>1)) ;
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	82 70       	andi	r24, 0x02	; 2
    22f8:	90 70       	andi	r25, 0x00	; 0
    22fa:	95 95       	asr	r25
    22fc:	87 95       	ror	r24
    22fe:	98 2f       	mov	r25, r24
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	49 2f       	mov	r20, r25
    2306:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,2,((value&(1<<2))>>2)) ;
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	84 70       	andi	r24, 0x04	; 4
    2312:	90 70       	andi	r25, 0x00	; 0
    2314:	95 95       	asr	r25
    2316:	87 95       	ror	r24
    2318:	95 95       	asr	r25
    231a:	87 95       	ror	r24
    231c:	98 2f       	mov	r25, r24
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	62 e0       	ldi	r22, 0x02	; 2
    2322:	49 2f       	mov	r20, r25
    2324:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,3,((value&(1<<3))>>3)) ;
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	88 70       	andi	r24, 0x08	; 8
    2330:	90 70       	andi	r25, 0x00	; 0
    2332:	95 95       	asr	r25
    2334:	87 95       	ror	r24
    2336:	95 95       	asr	r25
    2338:	87 95       	ror	r24
    233a:	95 95       	asr	r25
    233c:	87 95       	ror	r24
    233e:	98 2f       	mov	r25, r24
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	63 e0       	ldi	r22, 0x03	; 3
    2344:	49 2f       	mov	r20, r25
    2346:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>

}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <write_hight_nibble>:

void write_hight_nibble( char portname, char value)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	00 d0       	rcall	.+0      	; 0x235a <write_hight_nibble+0x6>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	6a 83       	std	Y+2, r22	; 0x02
    DIO_WRITE_PIN(portname,4,((value&(1<<4))>>4));
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	80 71       	andi	r24, 0x10	; 16
    236a:	90 70       	andi	r25, 0x00	; 0
    236c:	95 95       	asr	r25
    236e:	87 95       	ror	r24
    2370:	95 95       	asr	r25
    2372:	87 95       	ror	r24
    2374:	95 95       	asr	r25
    2376:	87 95       	ror	r24
    2378:	95 95       	asr	r25
    237a:	87 95       	ror	r24
    237c:	98 2f       	mov	r25, r24
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	64 e0       	ldi	r22, 0x04	; 4
    2382:	49 2f       	mov	r20, r25
    2384:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,5,((value&(1<<5))>>5));
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	88 2f       	mov	r24, r24
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	80 72       	andi	r24, 0x20	; 32
    2390:	90 70       	andi	r25, 0x00	; 0
    2392:	95 95       	asr	r25
    2394:	87 95       	ror	r24
    2396:	95 95       	asr	r25
    2398:	87 95       	ror	r24
    239a:	95 95       	asr	r25
    239c:	87 95       	ror	r24
    239e:	95 95       	asr	r25
    23a0:	87 95       	ror	r24
    23a2:	95 95       	asr	r25
    23a4:	87 95       	ror	r24
    23a6:	98 2f       	mov	r25, r24
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	49 2f       	mov	r20, r25
    23ae:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,6,((value&(1<<6))>>6));
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	80 74       	andi	r24, 0x40	; 64
    23ba:	90 70       	andi	r25, 0x00	; 0
    23bc:	08 2e       	mov	r0, r24
    23be:	89 2f       	mov	r24, r25
    23c0:	00 0c       	add	r0, r0
    23c2:	88 1f       	adc	r24, r24
    23c4:	99 0b       	sbc	r25, r25
    23c6:	00 0c       	add	r0, r0
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	98 2f       	mov	r25, r24
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	66 e0       	ldi	r22, 0x06	; 6
    23d2:	49 2f       	mov	r20, r25
    23d4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>
    DIO_WRITE_PIN(portname,7,((value&(1<<7))>>7));
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	98 2f       	mov	r25, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	99 27       	eor	r25, r25
    23e0:	99 1f       	adc	r25, r25
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	67 e0       	ldi	r22, 0x07	; 7
    23e6:	49 2f       	mov	r20, r25
    23e8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <DIO_WRITE_PIN>

}
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <main>:
unsigned char counter2;
unsigned char counter3;
unsigned char counter4;

int main(void)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	e8 97       	sbiw	r28, 0x38	; 56
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
	LCD_DIRECTION();
    240a:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_DIRECTION>
	BUTTON_direction('B',4);
    240e:	82 e4       	ldi	r24, 0x42	; 66
    2410:	64 e0       	ldi	r22, 0x04	; 4
    2412:	0e 94 95 0b 	call	0x172a	; 0x172a <BUTTON_direction>
	BUTTON_direction('B',5);
    2416:	82 e4       	ldi	r24, 0x42	; 66
    2418:	65 e0       	ldi	r22, 0x05	; 5
    241a:	0e 94 95 0b 	call	0x172a	; 0x172a <BUTTON_direction>
	BUTTON_direction('B',6);
    241e:	82 e4       	ldi	r24, 0x42	; 66
    2420:	66 e0       	ldi	r22, 0x06	; 6
    2422:	0e 94 95 0b 	call	0x172a	; 0x172a <BUTTON_direction>
	BUTTON_direction('B',7);
    2426:	82 e4       	ldi	r24, 0x42	; 66
    2428:	67 e0       	ldi	r22, 0x07	; 7
    242a:	0e 94 95 0b 	call	0x172a	; 0x172a <BUTTON_direction>
	BUTTON_direction('B',8);
    242e:	82 e4       	ldi	r24, 0x42	; 66
    2430:	68 e0       	ldi	r22, 0x08	; 8
    2432:	0e 94 95 0b 	call	0x172a	; 0x172a <BUTTON_direction>
	LCD_Send_string("Kemo= 0");
    2436:	80 e6       	ldi	r24, 0x60	; 96
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
	LCD_movecursor(1,10);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	6a e0       	ldi	r22, 0x0A	; 10
    2442:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
	LCD_Send_string("Dev = 0");
    2446:	88 e6       	ldi	r24, 0x68	; 104
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
	LCD_movecursor(2,1);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
	LCD_Send_string("Ali=0");
    2456:	80 e7       	ldi	r24, 0x70	; 112
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
	LCD_movecursor(2,10);
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	6a e0       	ldi	r22, 0x0A	; 10
    2462:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
	LCD_Send_string("Abdo=0");
    2466:	86 e7       	ldi	r24, 0x76	; 118
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>

	while(1)
	{

		if ((BUTTON_reed('B',3)) == 1)
    246e:	82 e4       	ldi	r24, 0x42	; 66
    2470:	63 e0       	ldi	r22, 0x03	; 3
    2472:	0e 94 a6 0b 	call	0x174c	; 0x174c <BUTTON_reed>
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	09 f0       	breq	.+2      	; 0x247c <main+0x86>
    247a:	93 c0       	rjmp	.+294    	; 0x25a2 <main+0x1ac>
		{
			counter1++;
    247c:	80 91 87 00 	lds	r24, 0x0087
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	80 93 87 00 	sts	0x0087, r24
			LCD_movecursor(1,7);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	67 e0       	ldi	r22, 0x07	; 7
    248a:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
			LCD_Send_char(counter1 / 10 + 48);
    248e:	80 91 87 00 	lds	r24, 0x0087
    2492:	9a e0       	ldi	r25, 0x0A	; 10
    2494:	69 2f       	mov	r22, r25
    2496:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    249a:	80 5d       	subi	r24, 0xD0	; 208
    249c:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
			LCD_movecursor(1,8);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	68 e0       	ldi	r22, 0x08	; 8
    24a4:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
			LCD_Send_char(counter1 % 10 + 48);
    24a8:	80 91 87 00 	lds	r24, 0x0087
    24ac:	9a e0       	ldi	r25, 0x0A	; 10
    24ae:	69 2f       	mov	r22, r25
    24b0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    24b4:	89 2f       	mov	r24, r25
    24b6:	80 5d       	subi	r24, 0xD0	; 208
    24b8:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a8 e4       	ldi	r26, 0x48	; 72
    24c2:	b3 e4       	ldi	r27, 0x43	; 67
    24c4:	8d ab       	std	Y+53, r24	; 0x35
    24c6:	9e ab       	std	Y+54, r25	; 0x36
    24c8:	af ab       	std	Y+55, r26	; 0x37
    24ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24cc:	6d a9       	ldd	r22, Y+53	; 0x35
    24ce:	7e a9       	ldd	r23, Y+54	; 0x36
    24d0:	8f a9       	ldd	r24, Y+55	; 0x37
    24d2:	98 ad       	ldd	r25, Y+56	; 0x38
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a ef       	ldi	r20, 0xFA	; 250
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	89 ab       	std	Y+49, r24	; 0x31
    24e6:	9a ab       	std	Y+50, r25	; 0x32
    24e8:	ab ab       	std	Y+51, r26	; 0x33
    24ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ec:	69 a9       	ldd	r22, Y+49	; 0x31
    24ee:	7a a9       	ldd	r23, Y+50	; 0x32
    24f0:	8b a9       	ldd	r24, Y+51	; 0x33
    24f2:	9c a9       	ldd	r25, Y+52	; 0x34
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	2c f4       	brge	.+10     	; 0x250e <main+0x118>
		__ticks = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 ab       	std	Y+48, r25	; 0x30
    250a:	8f a7       	std	Y+47, r24	; 0x2f
    250c:	3f c0       	rjmp	.+126    	; 0x258c <main+0x196>
	else if (__tmp > 65535)
    250e:	69 a9       	ldd	r22, Y+49	; 0x31
    2510:	7a a9       	ldd	r23, Y+50	; 0x32
    2512:	8b a9       	ldd	r24, Y+51	; 0x33
    2514:	9c a9       	ldd	r25, Y+52	; 0x34
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	4c f5       	brge	.+82     	; 0x2578 <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	98 ab       	std	Y+48, r25	; 0x30
    254c:	8f a7       	std	Y+47, r24	; 0x2f
    254e:	0f c0       	rjmp	.+30     	; 0x256e <main+0x178>
    2550:	88 ec       	ldi	r24, 0xC8	; 200
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e a7       	std	Y+46, r25	; 0x2e
    2556:	8d a7       	std	Y+45, r24	; 0x2d
    2558:	8d a5       	ldd	r24, Y+45	; 0x2d
    255a:	9e a5       	ldd	r25, Y+46	; 0x2e
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <main+0x166>
    2560:	9e a7       	std	Y+46, r25	; 0x2e
    2562:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	8f a5       	ldd	r24, Y+47	; 0x2f
    2566:	98 a9       	ldd	r25, Y+48	; 0x30
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	98 ab       	std	Y+48, r25	; 0x30
    256c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	69 f7       	brne	.-38     	; 0x2550 <main+0x15a>
    2576:	7b cf       	rjmp	.-266    	; 0x246e <main+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	69 a9       	ldd	r22, Y+49	; 0x31
    257a:	7a a9       	ldd	r23, Y+50	; 0x32
    257c:	8b a9       	ldd	r24, Y+51	; 0x33
    257e:	9c a9       	ldd	r25, Y+52	; 0x34
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	98 ab       	std	Y+48, r25	; 0x30
    258a:	8f a7       	std	Y+47, r24	; 0x2f
    258c:	8f a5       	ldd	r24, Y+47	; 0x2f
    258e:	98 a9       	ldd	r25, Y+48	; 0x30
    2590:	9c a7       	std	Y+44, r25	; 0x2c
    2592:	8b a7       	std	Y+43, r24	; 0x2b
    2594:	8b a5       	ldd	r24, Y+43	; 0x2b
    2596:	9c a5       	ldd	r25, Y+44	; 0x2c
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <main+0x1a2>
    259c:	9c a7       	std	Y+44, r25	; 0x2c
    259e:	8b a7       	std	Y+43, r24	; 0x2b
    25a0:	66 cf       	rjmp	.-308    	; 0x246e <main+0x78>
			_delay_ms(200);
		}
		else if ((BUTTON_reed('B',4)) == 1)
    25a2:	82 e4       	ldi	r24, 0x42	; 66
    25a4:	64 e0       	ldi	r22, 0x04	; 4
    25a6:	0e 94 a6 0b 	call	0x174c	; 0x174c <BUTTON_reed>
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <main+0x1ba>
    25ae:	93 c0       	rjmp	.+294    	; 0x26d6 <main+0x2e0>
		{
		 counter2++;
    25b0:	80 91 89 00 	lds	r24, 0x0089
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	80 93 89 00 	sts	0x0089, r24
		 LCD_movecursor(1,15);
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	6f e0       	ldi	r22, 0x0F	; 15
    25be:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
		 LCD_Send_char(counter2 / 10 + 48);
    25c2:	80 91 89 00 	lds	r24, 0x0089
    25c6:	9a e0       	ldi	r25, 0x0A	; 10
    25c8:	69 2f       	mov	r22, r25
    25ca:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    25ce:	80 5d       	subi	r24, 0xD0	; 208
    25d0:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
		 LCD_movecursor(1,16);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	60 e1       	ldi	r22, 0x10	; 16
    25d8:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
		 LCD_Send_char(counter2 % 10 + 48);
    25dc:	80 91 89 00 	lds	r24, 0x0089
    25e0:	9a e0       	ldi	r25, 0x0A	; 10
    25e2:	69 2f       	mov	r22, r25
    25e4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    25e8:	89 2f       	mov	r24, r25
    25ea:	80 5d       	subi	r24, 0xD0	; 208
    25ec:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a8 e4       	ldi	r26, 0x48	; 72
    25f6:	b3 e4       	ldi	r27, 0x43	; 67
    25f8:	8f a3       	std	Y+39, r24	; 0x27
    25fa:	98 a7       	std	Y+40, r25	; 0x28
    25fc:	a9 a7       	std	Y+41, r26	; 0x29
    25fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	6f a1       	ldd	r22, Y+39	; 0x27
    2602:	78 a5       	ldd	r23, Y+40	; 0x28
    2604:	89 a5       	ldd	r24, Y+41	; 0x29
    2606:	9a a5       	ldd	r25, Y+42	; 0x2a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4a ef       	ldi	r20, 0xFA	; 250
    260e:	54 e4       	ldi	r21, 0x44	; 68
    2610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8b a3       	std	Y+35, r24	; 0x23
    261a:	9c a3       	std	Y+36, r25	; 0x24
    261c:	ad a3       	std	Y+37, r26	; 0x25
    261e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2620:	6b a1       	ldd	r22, Y+35	; 0x23
    2622:	7c a1       	ldd	r23, Y+36	; 0x24
    2624:	8d a1       	ldd	r24, Y+37	; 0x25
    2626:	9e a1       	ldd	r25, Y+38	; 0x26
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2634:	88 23       	and	r24, r24
    2636:	2c f4       	brge	.+10     	; 0x2642 <main+0x24c>
		__ticks = 1;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a a3       	std	Y+34, r25	; 0x22
    263e:	89 a3       	std	Y+33, r24	; 0x21
    2640:	3f c0       	rjmp	.+126    	; 0x26c0 <main+0x2ca>
	else if (__tmp > 65535)
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	3f ef       	ldi	r19, 0xFF	; 255
    264e:	4f e7       	ldi	r20, 0x7F	; 127
    2650:	57 e4       	ldi	r21, 0x47	; 71
    2652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2656:	18 16       	cp	r1, r24
    2658:	4c f5       	brge	.+82     	; 0x26ac <main+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265a:	6f a1       	ldd	r22, Y+39	; 0x27
    265c:	78 a5       	ldd	r23, Y+40	; 0x28
    265e:	89 a5       	ldd	r24, Y+41	; 0x29
    2660:	9a a5       	ldd	r25, Y+42	; 0x2a
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	9a a3       	std	Y+34, r25	; 0x22
    2680:	89 a3       	std	Y+33, r24	; 0x21
    2682:	0f c0       	rjmp	.+30     	; 0x26a2 <main+0x2ac>
    2684:	88 ec       	ldi	r24, 0xC8	; 200
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	98 a3       	std	Y+32, r25	; 0x20
    268a:	8f 8f       	std	Y+31, r24	; 0x1f
    268c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268e:	98 a1       	ldd	r25, Y+32	; 0x20
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <main+0x29a>
    2694:	98 a3       	std	Y+32, r25	; 0x20
    2696:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	89 a1       	ldd	r24, Y+33	; 0x21
    269a:	9a a1       	ldd	r25, Y+34	; 0x22
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	69 f7       	brne	.-38     	; 0x2684 <main+0x28e>
    26aa:	e1 ce       	rjmp	.-574    	; 0x246e <main+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
    26c0:	89 a1       	ldd	r24, Y+33	; 0x21
    26c2:	9a a1       	ldd	r25, Y+34	; 0x22
    26c4:	9e 8f       	std	Y+30, r25	; 0x1e
    26c6:	8d 8f       	std	Y+29, r24	; 0x1d
    26c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <main+0x2d6>
    26d0:	9e 8f       	std	Y+30, r25	; 0x1e
    26d2:	8d 8f       	std	Y+29, r24	; 0x1d
    26d4:	cc ce       	rjmp	.-616    	; 0x246e <main+0x78>
		 _delay_ms(200);
		}
		else if ((BUTTON_reed('B',5)) == 1)
    26d6:	82 e4       	ldi	r24, 0x42	; 66
    26d8:	65 e0       	ldi	r22, 0x05	; 5
    26da:	0e 94 a6 0b 	call	0x174c	; 0x174c <BUTTON_reed>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <main+0x2ee>
    26e2:	93 c0       	rjmp	.+294    	; 0x280a <main+0x414>
		{
		 counter3++;
    26e4:	80 91 86 00 	lds	r24, 0x0086
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	80 93 86 00 	sts	0x0086, r24
		 LCD_movecursor(2,5);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	65 e0       	ldi	r22, 0x05	; 5
    26f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
		 LCD_Send_char(counter3 / 10 + 48);
    26f6:	80 91 86 00 	lds	r24, 0x0086
    26fa:	9a e0       	ldi	r25, 0x0A	; 10
    26fc:	69 2f       	mov	r22, r25
    26fe:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    2702:	80 5d       	subi	r24, 0xD0	; 208
    2704:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
		 LCD_movecursor(2,6);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	66 e0       	ldi	r22, 0x06	; 6
    270c:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
		 LCD_Send_char(counter3 % 10 + 48);
    2710:	80 91 86 00 	lds	r24, 0x0086
    2714:	9a e0       	ldi	r25, 0x0A	; 10
    2716:	69 2f       	mov	r22, r25
    2718:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    271c:	89 2f       	mov	r24, r25
    271e:	80 5d       	subi	r24, 0xD0	; 208
    2720:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a8 e4       	ldi	r26, 0x48	; 72
    272a:	b3 e4       	ldi	r27, 0x43	; 67
    272c:	89 8f       	std	Y+25, r24	; 0x19
    272e:	9a 8f       	std	Y+26, r25	; 0x1a
    2730:	ab 8f       	std	Y+27, r26	; 0x1b
    2732:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	69 8d       	ldd	r22, Y+25	; 0x19
    2736:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	8d 8b       	std	Y+21, r24	; 0x15
    274e:	9e 8b       	std	Y+22, r25	; 0x16
    2750:	af 8b       	std	Y+23, r26	; 0x17
    2752:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2754:	6d 89       	ldd	r22, Y+21	; 0x15
    2756:	7e 89       	ldd	r23, Y+22	; 0x16
    2758:	8f 89       	ldd	r24, Y+23	; 0x17
    275a:	98 8d       	ldd	r25, Y+24	; 0x18
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	2c f4       	brge	.+10     	; 0x2776 <main+0x380>
		__ticks = 1;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
    2774:	3f c0       	rjmp	.+126    	; 0x27f4 <main+0x3fe>
	else if (__tmp > 65535)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	4c f5       	brge	.+82     	; 0x27e0 <main+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278e:	69 8d       	ldd	r22, Y+25	; 0x19
    2790:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2792:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2794:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e2       	ldi	r20, 0x20	; 32
    279c:	51 e4       	ldi	r21, 0x41	; 65
    279e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	bc 01       	movw	r22, r24
    27a8:	cd 01       	movw	r24, r26
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <main+0x3e0>
    27b8:	88 ec       	ldi	r24, 0xC8	; 200
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	9a 8b       	std	Y+18, r25	; 0x12
    27be:	89 8b       	std	Y+17, r24	; 0x11
    27c0:	89 89       	ldd	r24, Y+17	; 0x11
    27c2:	9a 89       	ldd	r25, Y+18	; 0x12
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <main+0x3ce>
    27c8:	9a 8b       	std	Y+18, r25	; 0x12
    27ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9c 8b       	std	Y+20, r25	; 0x14
    27d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d6:	8b 89       	ldd	r24, Y+19	; 0x13
    27d8:	9c 89       	ldd	r25, Y+20	; 0x14
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	69 f7       	brne	.-38     	; 0x27b8 <main+0x3c2>
    27de:	47 ce       	rjmp	.-882    	; 0x246e <main+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e0:	6d 89       	ldd	r22, Y+21	; 0x15
    27e2:	7e 89       	ldd	r23, Y+22	; 0x16
    27e4:	8f 89       	ldd	r24, Y+23	; 0x17
    27e6:	98 8d       	ldd	r25, Y+24	; 0x18
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9c 8b       	std	Y+20, r25	; 0x14
    27f2:	8b 8b       	std	Y+19, r24	; 0x13
    27f4:	8b 89       	ldd	r24, Y+19	; 0x13
    27f6:	9c 89       	ldd	r25, Y+20	; 0x14
    27f8:	98 8b       	std	Y+16, r25	; 0x10
    27fa:	8f 87       	std	Y+15, r24	; 0x0f
    27fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fe:	98 89       	ldd	r25, Y+16	; 0x10
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <main+0x40a>
    2804:	98 8b       	std	Y+16, r25	; 0x10
    2806:	8f 87       	std	Y+15, r24	; 0x0f
    2808:	32 ce       	rjmp	.-924    	; 0x246e <main+0x78>
		 _delay_ms(200);
		}
		else if ((BUTTON_reed('B',6)) == 1)
    280a:	82 e4       	ldi	r24, 0x42	; 66
    280c:	66 e0       	ldi	r22, 0x06	; 6
    280e:	0e 94 a6 0b 	call	0x174c	; 0x174c <BUTTON_reed>
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	09 f0       	breq	.+2      	; 0x2818 <main+0x422>
    2816:	93 c0       	rjmp	.+294    	; 0x293e <main+0x548>
		{
			counter4++;
    2818:	80 91 88 00 	lds	r24, 0x0088
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	80 93 88 00 	sts	0x0088, r24
			LCD_movecursor(2,15);
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	6f e0       	ldi	r22, 0x0F	; 15
    2826:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
            LCD_Send_char(counter4 / 10 + 48);
    282a:	80 91 88 00 	lds	r24, 0x0088
    282e:	9a e0       	ldi	r25, 0x0A	; 10
    2830:	69 2f       	mov	r22, r25
    2832:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    2836:	80 5d       	subi	r24, 0xD0	; 208
    2838:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
            LCD_movecursor(2,16);
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	60 e1       	ldi	r22, 0x10	; 16
    2840:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
            LCD_Send_char(counter4 % 10 + 48);
    2844:	80 91 88 00 	lds	r24, 0x0088
    2848:	9a e0       	ldi	r25, 0x0A	; 10
    284a:	69 2f       	mov	r22, r25
    284c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodqi4>
    2850:	89 2f       	mov	r24, r25
    2852:	80 5d       	subi	r24, 0xD0	; 208
    2854:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Send_char>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a8 e4       	ldi	r26, 0x48	; 72
    285e:	b3 e4       	ldi	r27, 0x43	; 67
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a ef       	ldi	r20, 0xFA	; 250
    2876:	54 e4       	ldi	r21, 0x44	; 68
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <main+0x4b4>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <main+0x532>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <main+0x514>
    28ec:	88 ec       	ldi	r24, 0xC8	; 200
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0x502>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <main+0x4f6>
    2912:	ad cd       	rjmp	.-1190   	; 0x246e <main+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <main+0x53e>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	98 cd       	rjmp	.-1232   	; 0x246e <main+0x78>
            _delay_ms(200);
		}
        else if ((BUTTON_reed('B',7)) == 1)
    293e:	82 e4       	ldi	r24, 0x42	; 66
    2940:	67 e0       	ldi	r22, 0x07	; 7
    2942:	0e 94 a6 0b 	call	0x174c	; 0x174c <BUTTON_reed>
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	09 f0       	breq	.+2      	; 0x294c <main+0x556>
    294a:	91 cd       	rjmp	.-1246   	; 0x246e <main+0x78>
        {
        	counter1=counter2=counter3=counter4=0;
    294c:	10 92 88 00 	sts	0x0088, r1
    2950:	80 91 88 00 	lds	r24, 0x0088
    2954:	80 93 86 00 	sts	0x0086, r24
    2958:	80 91 86 00 	lds	r24, 0x0086
    295c:	80 93 89 00 	sts	0x0089, r24
    2960:	80 91 89 00 	lds	r24, 0x0089
    2964:	80 93 87 00 	sts	0x0087, r24
        	LCD_clearscreen();
    2968:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_clearscreen>
        	LCD_Send_string("Kemo= 0");
    296c:	80 e6       	ldi	r24, 0x60	; 96
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
        	LCD_movecursor(1,10);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	6a e0       	ldi	r22, 0x0A	; 10
    2978:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
        	LCD_Send_string("Dev = 0");
    297c:	88 e6       	ldi	r24, 0x68	; 104
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
        	LCD_movecursor(2,1);
    2984:	82 e0       	ldi	r24, 0x02	; 2
    2986:	61 e0       	ldi	r22, 0x01	; 1
    2988:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
        	LCD_Send_string("Ali=0");
    298c:	80 e7       	ldi	r24, 0x70	; 112
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
        	LCD_movecursor(2,10);
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	6a e0       	ldi	r22, 0x0A	; 10
    2998:	0e 94 ef 0a 	call	0x15de	; 0x15de <LCD_movecursor>
        	LCD_Send_string("Abdo=0");
    299c:	86 e7       	ldi	r24, 0x76	; 118
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <LCD_Send_string>
    29a4:	64 cd       	rjmp	.-1336   	; 0x246e <main+0x78>

000029a6 <__udivmodqi4>:
    29a6:	99 1b       	sub	r25, r25
    29a8:	79 e0       	ldi	r23, 0x09	; 9
    29aa:	04 c0       	rjmp	.+8      	; 0x29b4 <__udivmodqi4_ep>

000029ac <__udivmodqi4_loop>:
    29ac:	99 1f       	adc	r25, r25
    29ae:	96 17       	cp	r25, r22
    29b0:	08 f0       	brcs	.+2      	; 0x29b4 <__udivmodqi4_ep>
    29b2:	96 1b       	sub	r25, r22

000029b4 <__udivmodqi4_ep>:
    29b4:	88 1f       	adc	r24, r24
    29b6:	7a 95       	dec	r23
    29b8:	c9 f7       	brne	.-14     	; 0x29ac <__udivmodqi4_loop>
    29ba:	80 95       	com	r24
    29bc:	08 95       	ret

000029be <__prologue_saves__>:
    29be:	2f 92       	push	r2
    29c0:	3f 92       	push	r3
    29c2:	4f 92       	push	r4
    29c4:	5f 92       	push	r5
    29c6:	6f 92       	push	r6
    29c8:	7f 92       	push	r7
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	ca 1b       	sub	r28, r26
    29e8:	db 0b       	sbc	r29, r27
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	09 94       	ijmp

000029f6 <__epilogue_restores__>:
    29f6:	2a 88       	ldd	r2, Y+18	; 0x12
    29f8:	39 88       	ldd	r3, Y+17	; 0x11
    29fa:	48 88       	ldd	r4, Y+16	; 0x10
    29fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    29fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a00:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a02:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a04:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a06:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a08:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0a:	c8 84       	ldd	r12, Y+8	; 0x08
    2a0c:	df 80       	ldd	r13, Y+7	; 0x07
    2a0e:	ee 80       	ldd	r14, Y+6	; 0x06
    2a10:	fd 80       	ldd	r15, Y+5	; 0x05
    2a12:	0c 81       	ldd	r16, Y+4	; 0x04
    2a14:	1b 81       	ldd	r17, Y+3	; 0x03
    2a16:	aa 81       	ldd	r26, Y+2	; 0x02
    2a18:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1a:	ce 0f       	add	r28, r30
    2a1c:	d1 1d       	adc	r29, r1
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	ed 01       	movw	r28, r26
    2a2a:	08 95       	ret

00002a2c <_exit>:
    2a2c:	f8 94       	cli

00002a2e <__stop_program>:
    2a2e:	ff cf       	rjmp	.-2      	; 0x2a2e <__stop_program>
